[{"content":"Together ジャンル：2人協力プラットフォームゲーム 制作時間：4ヶ月間 人数：3人 プログラマー1人、プランナー1人、デザイナー1人 内容：ゲームの背景が比較的暗いため、プレイヤーはキャラクターの周囲しか見ることができません。プレイヤーはライトを活用し、視野を広げ、協力してゲームクリアを目指します。 注目点\nUnity 2Dライティング機能を導入し、綺麗なグラフィックを実現しました。 LineRendererとRayCastを用いて、反射レーザーを実装しました。 C#でソケット通信サーバーを構築し、ローカル協力プレイを実現しました。 ソースコード\n動画サイト（英語字幕対応）\nSouls ジャンル：アクションゲーム 制作時間：2ヶ月間 人数：1人 内容：「Dark Souls」を参考にし、Unityアセットストアの素材を利用し、キャラクターの移動、ジャンプ、ローリング、攻撃、盾のパリィ、ロックオンなどの機能を実装しました。 ソースコード\nRoots Global Game Jam 2023 Tokyo, Roppongi\n異なる国からの参加者とチームを組んで、現場で48時間以内に企画から開発まで制作したゲーム\nジャンル：シミュレーションゲーム 制作時間：48時間 人数：4人 プログラマー1人、プランナー1人、デザイナー1人、ミュージシャン1人 内容：同時にいくつかの根を左右に移動させ、障害物を避けながら、目的地に行きます。 注目点\n「Unity Sprite Shape」機能を用いて、根の成長アニメーションをスムーズに実現しました。 Unityのコルーチンを用いて、カメラの移動を実現しました。 三つ難易度を備えています。 ソースコード\n動画サイト（中国語字幕対応）\nEmotion ジャンル：カードゲーム 制作時間：3ヶ月間 人数：3人 プログラマー1人、プランナー1人、デザイナー1人 内容：ローグライクゲームであり、状況によってカードを選び、クリア後に報酬を獲得します。 注目点\n良いデザインパターンを使用しています。 C#のリフレクションを用いて、綺麗なコードを書きました。 カードやバトルフィールドのUIを構築しました。 ソースコード\nNieR ジャンル：弾幕シューティングゲーム 制作期間：3週間 人数：1人 内容：「NieR:Automata」の弾幕ゲーを模倣し制作 注目点　エフェクトシェーダーとポストプロセッシングエフェクトを用いて、綺麗な画面を実現しました。 ヒットストップとパーティクル効果を用いて、優れた打撃感を実現しました。 「Object Pool」を利用し、処理速度を向上させました。 ソースコード\nCeleste ジャンル：プラットフォームゲーム 制作期間：1週間 人数：1人 内容：「Celeste」を模倣し制作 注目点\nState Machineを用いて、キャラクターの状態を管理しています。 パラメータを細かく調整し、気持ち良い手触りを実現します。 スムーズなカメラエフェクトを実現しています。 ソースコード\nRepair Global Game Jam 2019, Shanghai\nジャンル：ノベルゲーム 制作期間：48時間 人数：2人 プログラマー1人、デザイナー1人 内容：過去の失敗を繰り返し、良い結果を見つける 注目点\n拡張可能なテキストエディターフレームワークを実現しました。 ソースコード ご覧いただきありがとうございました。\n","permalink":"https://nagisa3113.github.io/posts/work/","title":"作品一覧"},{"content":"Together 双人合作平台跳跃游戏\n制作时间 4个月\n制作成员：1程序 1策划 1美术\n使用了2D光照。游戏的背景比较暗，玩家只能看到角色附近的环境。玩家需要利用场景中的光源，扩大视野，合作通关。\n亮点\n使用2D光照和Shader效果，实现华丽的画面效果。 利用光源设计了很多谜题。 实现了本地多人同步功能（LAN by TCP）。 Code\n動画サイト（英語字幕対応）\nSouls 动作游戏\n制作时间 2个月\n参考Dark Souls，实现了角色移动，跳跃，翻滚，攻击，盾反，视角锁定等功能。\nCode\nRoot 植物模拟游戏\nGlobal Game Jam 2023 Tokyo, Roppongi\n制作人员：1程序 1策划 1美术 1音乐\n与来自不同国家的参加者组队，48小时内构思到实现现场开发出的一款游戏。\n游戏内容是同时控制好几支树根，在避开障碍物的条件下到达目的地。\n亮点\n使用Sprite Shape功能，实现流畅的树根生长动画。 操作方式很简单，但也具备挑战性。 掌握了短时间内进度管理和沟通的能力。 Code\n動画サイト（中国字幕対応）\nEmotion 卡牌游戏\n制作时间 3个月\n制作人员 1程序 1策划 1美术\n是一款rogue like游戏，玩家在过关后可以获得报酬。\n亮点\n使用了优秀的设计模式。 使用了可扩展的数据结构。 Code\nNieR 弹幕射击游戏\n被NieR:Automata中的小游戏吸引，一个人花了三周时间完成\n亮点\n使用Shader实现各种画面效果，如Bloom 随机背景。 利用各种效果实现优秀的打击感。 还原原作，非常好玩。 Code\nCeleste 自学Unity一周内完成的游戏Demo\n模仿Celeste，复现优秀的操作手感\n亮点\n使用状态机，使角色的动作代码变得简洁易扩展。 精细地调节参数，实现优秀的操作手感。 实现了流畅的摄像机跟随效果。 Code\nRepair 视觉小说\nGlobal Game Jam 2019, Shanghai\n制作人员 1程序 1设计\n第一次参加Global Game Jam，制作游戏\n亮点\n实现了一个可扩展的文本编辑器\nCode\nご覧いただきありがとうございます\n","permalink":"https://nagisa3113.github.io/posts/zuopin/","title":"作品"},{"content":"在软件工程中，绕不开的一个过程就是测试。\n为什么需要测试？ 避免写出耦合度高难以维护的烂代码，当然，这与设计模式也有密不可分的关系\n当出现以下情况时，就需要考虑是否需要添加测试\n看不懂以前写的代码 频繁改动已有的代码 出现难以复现的bug 不知道从哪里开始调试 改动一处后引起一系列bug 什么是测试驱动开发 Kent Beck：“测试驱动开发不是一种测试技术。它是一种分析技术、设计技术，更是一种组织所有开发活动的技术”。\nTDD（Test Driven Development），通常指的是UTDD（Unit Test Driven Development）单元测试驱动开发，原理是在开发功能代码前，先编写单元测试用例代码，再进行实现。\n什么是单元测试 Unit Test ，是针对程序设计中的最小模块进行正确性检验的测试工作\n通常是使用断言（Assert）对单个函数功能进行测试\n为什么要单元测试 保证代码质量，主要体现在当代码被修改后功能依然正常，实际上就是维护API\n由谁来编写 测试工程师还是软件开发人员？实际上，凡是修改了代码的人都需要编写单元测试\n什么时候编写测试 TDD提倡在实现具体代码之前编写测试\n什么需要测试 主要针对复杂的、容易出错的功能。较少的测试意味着对代码足够自信，比如get set不需要测试\n单元测试必须自动化 每修改一次程序就要进行一次单元测试，使用脚本或自动化工具节省人力成本\n弊端 显然，编写测试会增加负担，额外的代码量是人们不愿意写测试的最大原因，但这并不是测试的弊端，一些不好的测试会带来很多隐患。相反，一个良好的测试代码应该做到足够简单，否则不仅维护时要修改功能代码，还要修改测试代码。\n为什么需要测试驱动开发 Kent Beck: “代码简洁可用这句言简意赅的话，正是 TDD 所追求的目标”。\n核心 拆分任务，一次只关注一件事，小步前进\n过程 编写一个功能最小的单元测试，运行时当然会失败 编写实现代码，使其刚好可以通过测试 重构，消除代码的smell，再次运行测试 原因 为什么不能先写功能实现代码？\n无法确定这段代码是为了实现什么功能，以及是否真的实现了\n为什么明知道会报错，还要运行\n报错有很多种可能，目的是看看是不是期望的错误\n为什么要编写刚好可以通过的代码\n如果超出了测试的功能，这部分代码就不知道是否正确，需要手工测试，如果是后面新增的功能，那么后面编写的测试就会直接通过\n如何重构？\n这是另外一个领域的事情了\n一个好的实例: 测试驱动开发（TDD）入门\nTDD是银弹（Silver Bullet）吗 TDD并不能解决所有的问题，不能保证程序一定不出错。\n","permalink":"https://nagisa3113.github.io/posts/tdd/","title":"测试驱动开发"},{"content":"浅谈网络游戏开发中的TCP/UDP、帧同步/状态同步以及预测、快照和回滚\n网络拓扑结构 Peer-to-Peer P2P 网状结构，一般是所有客户端两两链接，传统的局域网游戏 Client-Server CS 星状结构，至少有一部服务器，客户端只与服务器连接 网络传输协议 UDP/TCP属于传输层（Transport Layer）\nTCP 保序可靠传输（Sequenced Reliable Transmission） 传输慢，因为要保证正确性 连接慢，首次通信需要进行著名的三次握手连接，复杂且黑盒，难扩展， 报头大，不适用于数据包数量多的情况 UDP 不可靠不保序传输（Unsequenced Unreliable Transmission），即传输不保序，也不确保可达，某个具体数据包在传输的过程中，是可能丢失的；也可能数据包到达了，但数据出错从而校验失败，也被Socket丢弃掉 传输快，Socket不会浪费时间和带宽，对丢失的数据包进行重传 不需要建立连接，收发双方每次通信都是无状态的 简单，上层应用能按需实现额外的传输特性（QoS），很多游戏会自己开发可靠传输、冗余的UDP 报头小，节省带宽 大部分游戏使用的都是UDP，而TCP适合节奏慢的游戏，如炉石传说等回合制游戏，值得一提的是魔兽世界用的是TCP\n网络同步模型(Network Model) 确定性帧同步(deterministic lockstep) 常用于格斗、竞速、即时战略游戏。如星际争霸、魔兽争霸 快照插值(snapshot interpolation) FPS经典同步模型，《Quake》最早采用，后续众多FPS在之上做了改进 状态同步(state synchronization) 有点像是快照插值的改进版，Overwatch所采用的 一般情况下我们谈论的只有两类：帧同步(lockstep)和状态同步(state synchronization)\n帧同步 是锁步同步(LockStep)的改进版本，它只同步状态变化的原因，如玩家的按键输入，服务器以固定的帧率收集每个客户端的输入，然后把这些输入广播给所有的客户端，由于每个操作指令到达所有客户端的时间（帧）是一样的，所以每个客户端运算结果也是一样的。为了保证游戏的公平性，如果一个玩家掉线了，其他玩家就会等待，例如有的外挂会等待其他客户端的帧都到达后才发送自己的帧。\n它要求各个客户端的运算逻辑严格相同，否则一点的误差将会导致蝴蝶效应，解决方法：\n使用定点数代替浮点数，通常会使用第三方库 使用统一的随机数种子 确定性的容器算法，如保证排序的稳定性 优点 开发效率高 更强的打击感 客户端接受指令后就可以单独进行画面渲染，格斗游戏使用的都是帧同步 流量消耗稳定 魔兽争霸的录像只有几百k，因为只记录了输入序列 缺点 网络要求高，一般都使用UDP保证更低的延迟， 帧同步是锁帧的，如果有网络的抖动，一段时间调用次数不稳定，网络的延迟就会挤压，引起卡顿 安全性低，反外挂能力弱，所有玩家的数据都会被发送到客户端，逻辑运算在客户端里，可以轻易的进行内存修改 断线重连时间长，需要将游戏开始到当前时间的全部帧数据进行计算 性能优化难 帧同步buffer 每个玩家的输入会发给所有客户端，服务器会按照一定的频率给帧编号，只有之后某一帧数据来到时才能执行当前帧，\nbuffer是一个帧队列的缓冲区，它可以根据网络情况动态改变大小\nbuffer很小时，得到帧数据时可以立即执行，不需要等待，延迟就低，但如果下一帧一直不来，就不能执行当前帧，就会产生抖动 buffer很大时，画面不抖动了，但延迟会增加 状态同步 所有逻辑运算在某个权威主机上执行，再下发到各个客户端中，考虑具体的网络拓扑结构，通常在服务器(Server)进行状态计算，在也称为C-S同步(Client-Server)\n优点 安全性高，所有计算在服务器端执行 网络要求宽松，抖动包适应性强 断线重连快，只需要将最新状态下发给客户端 利于性能优化，在客户端中看不到的角色可以不用创建 缺点 开发效率低 动作类游戏打击感和精确性差 流量随着游戏复杂度而逐渐增长 预测、回滚与快照 前面说到，帧同步要等待服务器的回包，这就会严重影响游戏的体验，所以即使在延迟高的网络条件下,玩家在按下按键后，客户端也要立即做出响应，保证本地玩家感觉不卡\n于是很多FPS游戏会对玩家的操作进行预测，不用每次都等待服务器的回包，玩家按下按键就会立刻有反应，无论网络情况，这会使得客户端永远领先服务器。\n举个例子，当客户端运行至41帧时，若网络延迟，未能收到服务器传来的第41帧数据客户端会通过最后几帧的信息，“预测”玩家在下一个时刻位置状态，例如让玩家保持之前的速度，动画继续“预测”运行一段时间，同时缓存此“预测”结果留做比对。\n倘若当前客户端运行到第45帧，此时收到了服务器下发的第41帧信息，客户端会将之前“预测”的41帧信息与之做比对，确定预测是否正确\n若预测成功便抛弃这一帧的信息。 若预测失败，意味着之后的41到45帧都是错误的，则需要回滚到40帧，覆盖41帧重新运行这段时间更新数据更新画面表现，并追上当前时间 既然要回滚到之前某一帧，就要保存当时玩家的操作和状态信息，被称作“快照(snapshot)”，某种程度上可以说是状态同步\n不是所以信息客户端都需要进行预测，如UI血量等，需要预测的信息可以是击中特效，这对打击感的实现尤为重要\nPS：想起以前玩CF，卡的时候对着僵尸突突突还有特效，几秒后角色便瞬移到另一个地方的。\n逻辑表示分离与插值 帧有两种定义\n逻辑帧 Tick 渲染帧 Frame 逻辑帧率和渲染帧率是互相独立的可以理解为Unity中Update和FixedUpdate的关系\n一般服务器只同步逻辑帧，在客户端进行渲染帧的计算\n由于客户端只负责一些模型、动画、位置信息，当收到服务器发送来的帧序列时，会根据该帧信息和当前状态进行插值，例如在速度、方向上进行插值。这样可以做到逻辑帧率和渲染帧率不一样，画面抖动和延迟感觉会降低\n《守望先锋》 ECS架构\nEntity： Component的集合 Component： 只有数据，没有函数 System只： 有函数，没有状态 通过ECS架构，可以尽量将网络同步和引擎部分解耦，System只需要遍历含有需要回滚的Component的Entity， 例如 NetworkEvent只遍历含有MovementState的Entity\n对需要回滚的组件进行快照式存储 通过这些组件实现对实体的增量式存储 PS：守望先锋中维护了一个“脏”状态集合，我还没搞懂和ECS有什么联系。。。\n《王者荣耀》 基于Unity 4.6 重新编写可靠传输的UDP 不使用帧buffer，收到帧数据后立即执行 逻辑与表现分离，逻辑部分使用C++重新编写 本地插值 参考 Understanding Fighting Game Networking 《王者荣耀》复盘 《守望先锋》架构设计与网络同步 《守望先锋》回放技术 再谈网游同步技术 Glenn Fiedler ","permalink":"https://nagisa3113.github.io/posts/network/","title":"网络游戏同步"},{"content":"GOAP，Goal-Oriented Action Planning是一个很好的AI动态规划解决方案，与之相对的是传统的硬编码，如状态机和行为树，Unity中提供了AIPlanner插件\nFSM 使用FSM有限状态机的弊端：当AI行为非常庞大时，很难维护，代码可读性和重用性低\n行为树 行为树节点的可复用性高，可以自由组合出行为而不用重新编码整个框架，但由于是依赖设计者的固定架构的，很不灵活，做的选择不一定是最优选择，每次都要经过大量的逻辑判断。\nGOAP 让AI自己找到解决问题的办法，它会根据环境动态中决策出最优的选择，从而达到看起来相对智能的AI，且代码的分层相对清晰，可读性高，重用性高。\n我们只提供\n可执行的行为，包括行为的先决条件和影响效果 不同目标的优先级 玩家状态和世界环境的描述 得到结果：\n一个行动Action的序列，通常使用队列进行存储\n部件 找到一个还不错的项目，BlueGameAI\nState 用于记录角色状态，Action表示某个行动\nclass State{ //当状态被改变时触发的事件 event OnChange(); } class Action{ //动作的花费，优先级和是否可以被中断 int cost,priority bool canInterrupited; //动作的先决条件 State PreCondition; //动作执行后的状态 State Effect; } class ActionHandle(){ int id; event onActionFinished(); } ActionFSM 动作的状态机，其中也维护着一个动作状态（FSMState），要与人物的状态（AgentState）区别开来\nclass FSMState{ void Enter(); void Execute(); void Exit() } class ActionFSM{ //当前、上一个状态机状态 FSMState currentState,previousState; void AddState(); void ExecuteNewState(); void Update(){ currentState.Execute(); } } Goal 目标，比如获得武器，消灭敌人\nclass Goal{ //目标的优先级 int priority; //激活目标的前置条件 State ActiveCondition; //完成目标后的影响 State Effect; } Agent 挂载到角色身上，它整合了其他组件\nclass Agent(){ //角色状态 State AgentState; //Action管理对象 ACtionManager actionManager; //Goal管理对象 GoalManager goalManager; //计划管理对象，下文会提到 Performer performer; } Trigger 触发器，是影响决策改变的直接原因\nclass Trigger { //优先级 int priority //触发效果 State effect; //是否被触发 bool IsTrigger(); //触发影响 void Update{ if(Istrigger()) agent.AgentState.Set(effect);//改变Agent的状态 } } Planner 对需要执行的动作进行动态规划\nclass Planner(){ //制定计划 //参数为目标 //返回值为行为的序列 Queue\u0026lt;Action\u0026gt; BuildPlan(Goal goal); } class Performer{ //plan即为上面Planner计算出的行为序列 Queue\u0026lt;Action\u0026gt; plan = Planner.BuildPlan(currentGoal); //执行计划 void Next(){ //plan出栈，执行下一个Action Agent.ActionManager.ExecuteNewState(plan.Dequeue()); } } 执行过程 假设Agent初始状态为idle，ActionFSM为空 某个事件触发了Trigger，改变了Agent的状态State 触发State中的回调函数 event OnChange(); ActionManager 更新内部元素 GoalManager 获得当前目标优先级最大的目标 Performer 很据目标制定新计划 获得Action队列 让ActionFSM执行Action队列中的第一个元素 执行新ACtino后又改变了Agent的状态State，这时候由于已经处在某个计划中(队列中还有ACtion未完成)，先执行以下步骤进行判断并继续执行当前计划队列中的下一个动作，否则，回到第3步重新生成新的计划 检查计划/动作是否允许被中断 检查计划/动作是否为已经完成 以上是GOAP各个部分的简要介绍，实际工程写起来要复杂很多，可以参考一下前面链接中的项目\n算法 即，如何根据目标Goal得到最优的行为序列\n获得目标Goal与当前状态的差异 查看哪些action可以满足这些差异 该项目使用方式：树结构+动态规划\n这里举个例子，林克要死了，需要补充生命值，这时候有一个目标，砍苹果树获得苹果，达到这个目标需要哪些条件呢？\n林克到苹果树下 林克有一个斧头 林克有体力 这些条件与当前state有哪些差异呢？\n林克的位置(position)不在苹果树下 林克的背包里没有斧头 林克体力不多了 于是，开始遍历所有可以执行的Action，查看哪些可以改变林克的位置，比如走路，走路Action有一个cost(比如消耗体力，前进速度)，把它作为一个树节点，除了走路，骑马也可以，但骑马又需要马了，于是要先遍历可以让林克骑马的Action，比如找到马，驯服马，和马培养感情，遍历了这些子节点后，将其作为骑马这个复合节点的子节点，然后计算整个cost，可以类比哈夫曼编码，不过那个是贪心算法，这个是动态规划。\n遍历了所有的可执行Action后，一些独立的action会成为一些综合节点的子节点，比如，最后得到一下几种方案\n找马+养马+找斧头+砍树 步行+买斧头+砍树 传送+爬树 传送+放火烧树（没想到吧） 显然，传送、烧树、买斧头也是由一些小的子节点(Action)构成的，此时计算出了各个行为的cost，选择最优的一种方案，比如第2个，然后将步行、买斧头、砍树这四个节点的父节点设为树的头节点，(注意，复合节点本身不包括Action)，经过一次先序遍历，便能得到对应的Action序列。\n","permalink":"https://nagisa3113.github.io/posts/goap/","title":"GOAP 目标导向型算法"},{"content":"Unix 是简单的，你不需要成为一个天才或是计算机专家。但是在这个冲斥着 Windows 错误观念的世界，你需要信念和勇气才能理解它的简单 ————王垠：《完全用Linux工作》\n最近在王垠的博客看到这篇文章，其中有些想法很偏激，但我很喜欢。其他的还有清华梦的粉碎—写给清华大学的退学申请\n如果看了之后，对Linux产生了强烈的兴趣，还可以去看一下开源世界旅行手册，但这个作者好像弃坑很久了，即使是不会命令行的普通人，也可以尝试一下国产的Deepin，做的非常用心，开箱即用，只是日常使用的话基本可以取代Windows。\n纵观Linux的发展历程，发现它并不仅仅是一个操作系统，全称GNU/Linux，它象征着自由，开放，包容，黑客也许是世界上最向往自由的一群人吧，但由于种种原因，我们看不到那一天的到来。\n学习计算机也有几年了，在这个过程中，发现它所涵盖的知识太多了，学校里教的完全不够，但这个探索过程是充满乐趣的，除了技术上的内容，也开始思考一些其他事情，正如学习语言一样，每一种语言都是一种全新的思维方式，如果只限于平时阅读交流，不去想它们背后隐藏的哲学，就无法真正理解语言。\n尽管会有Vim和Emacs这种类似宗教信仰的分支，但文章里是这么说的\n当然我不是在这里打击 Linux 和 Mac 而鼓吹 Windows。这些系统的纷争基本上已经不关我什么事。我只是想告诉新人们，去除头脑里的宗教，偏激，仇恨和鄙视。每次仇恨一个东西，你就失去了向它学习的机会。\n计算机是了解世界的方式 最近还看了一本书《黑客与画家》，虽然它大部分在鼓吹创业和Lisp\n其中谈到\n使用计算机以及其所有有助于了解这个世界本质的事物都不应受到任何限制。任何事情都应该亲手尝试 信息应该免费 计算机使生活更加美好 我非常赞同这些话，计算机的出现大大提高了人们的生活质量，由于摩尔定律，电子设备更是越来越便宜，越来越强，黑客们在前人的基础上使开发出越来越好的软件，编程的门槛也越来越低。\n但遗憾的是国内现在的互联网环境太差了。按理来说，程序员比普通人更容易接触到最新最客观的信息，他们应该是更接近真理的人，应该更加谦逊，但国内很多所谓的程序员视野太狭窄，知道一点东西就出来卖弄。\n但这也与经济政策有关，就不多谈论了，百度、CSDN、知乎现在也不是什么好东西（不谈商业属性），质量参差不齐，风气也很差，见知乎和 MITBBS。\n还有很长的路要走 每一个学习计算机的人，不管从事的是哪个开发方向，都会经历这些过程（虽然这话从我这个萌新口中说出来不太合适）\n精通英语 掌握Linux 有自己的服务器\u0026amp;技术博客 了解各种编程语言/范式 了解硬件，电路原理 在某些技术论坛上分享经验/帮助新人 为某个开源项目做出贡献 配置专属的舒适开发环境（物理/虚拟） 通过计算机改善自己/周围人的生活质量 通过客观/及时的信息认识自己生活的这个世界 支持正版，抵制抄袭 乐于尝试新的事物 ","permalink":"https://nagisa3113.github.io/posts/computer/","title":"为什么要学计算机"},{"content":"树莓派（raspberriPi）是一个微型的，信用卡大小的可以运行Linux的单板机。它使用的是基于精简指令集（RISC）的ARM架构的处理器，相比于Intel采用的x86的复杂指令集（CISC），它的结构简单，功耗低，价格低，非常适合(穷)学生。\n这学习开了一门《嵌入式系统导论》，像我这种学生其实完全不学的，但刚好轮到我做这门课的实验，于是我借了块板子，开始了与树莓派的奇妙冒险（最后这门课只得了70分，史上最低），实验内容主要是使用GPIO控制传感器，电子电气的同学肯定很熟悉，但对于学计算机的同学就有另一套玩法了。\n比如说之前心心念念的GameShell，一个模块化的开源掌机，但它太贵了（1000￥），然而现在你可以单独购买电池、屏幕、扬声器手柄等配件，制作属于自己的掌机，还可以用来学习Linux和计算机网络等，我最开始是借的同学的3B，后来忍不住自己又去买了4B，最新版本是V1.2，不要跟我一样买到旧款了，旧款的不支持高端usb-c充电器，影响不大，推荐使用官方的充电设备，不要使用移动电源和电脑端的USB口。\n系统安装 首先需要一个SD卡格式化软件SDFormatter，每次安装新系统前都推荐先格式化\nNOOBS 下载地址，即New Out of Box System（全新开箱即用系统），只需要去官网下载然后拷贝到SD卡就可以了\n优点：\n简单 可以安装多系统 缺点\n体积大 安装过程慢 手动烧录系统 下载地址可以使用一键烧录软件如win32diskimager和ApplePi-Baker\n这里使用MacOS/Linux下的dd命令来烧录\n查看当前哪些设备已挂载，找到SD卡，如/dev/sda1 df -h 卸载设备 umount /dev/sda1 烧录，PATH为镜像的路径，bs表示一次写入多大的块，一般耗时几分钟不等 sudo dd if=PATH.img of=/dev/sda1 bs=4m; sync 开机启动 如果有显示器，直接连上就可以开机了，图形界面谁不爱呢?\n如果没有，使用SSH连接，树莓派为了安全考虑默认关闭了SSH，需要你在根目录下新建一个名为SSH（没有扩展名）的文件，推荐直接使用网线连接树莓派\n打开命令行，可以在路由器后台查询树莓派的ip地址，但也可以使用以下方式 sudo ssh pi@raspberrypi.local 默认账号为pi，默认密码为raspberry，登录后系统会提示你修改\n开启VNC（Virtual Network Computing），之后你就可以远程通过图形界面使用树莓派了 sudo raspi-config 选择Interfacing Options，选择VNC，重启 sudo reboot 在你的电脑上下载VNCViewer，登录方式与SSH类似\n开始折腾！\n可安装的操作系统 在自己电脑上折腾实体Linux很危险的，但在树莓派上就非常方便，可以多准备几个SD卡换着用\nArchLinux\n绝配，妙不可言，推荐使用i3桌面管理器，简洁高效，开源社区有很多不错的桌面环境比如sway\nUbuntu Mate\n图形界面很好用，1G内存稍有不足\nWindows 10 IoT Core\n主要面向物联网开发\nRetroPie\n严格来说并不算是系统，它是一个游戏机模拟器，在上面你可以玩到非常多的复古游戏，推荐直接下载拷满游戏的镜像，为此你需要准备一个相当大的SD卡和一个复古手柄（强烈推荐八位堂8Bitdo），也可以使用PICO-8等复古游戏引擎自己开发游戏\nAndroid\n没试过\nOSMC\n家庭娱乐中心，也就是机顶盒\nRISC OS\n过于硬核\n其他用途 日常开发 用来学Python再适合不过\n机器人控制 你可以在树莓派上安装摄像头，氢气球和传感器，让它飞向地球的边缘，去探索太空。当然了，这么做的话风险很大，一定要注意安全。这里指的不是你和你的树莓派，而是天上的飞机和住在下面的人们\n路由器 最开始的目的其实是为了搭建mentoHUST+ssr的路由器，但前提是电脑和树莓派要连在同一局域网下，渣科的校园网有登陆限制，所以我不得不再买一个路由器，虽然得不偿失但用起来还是很爽的，后来把家里的路由器刷了梅林固件，安装ssr插件，就不用在每个设备上单独配置了，非常方便\n网络附属存储（NAS） 3b型号的网口与USB共享300Mbps的带宽，4b升级成了千兆网口和USB3.0，大有一番作为，其实路由器（软路由）也可以实现这个功能，但专业的还是用群晖吧（好贵）\n私有云\u0026amp;离线下载 Aira2 ownCloud等，度盘药丸\n网站服务器 搭建个人博客，WordPress比较臃肿，静态博客的话推荐hugo\n计算机集群 使用多个树莓派搭建分布式系统\n","permalink":"https://nagisa3113.github.io/posts/raspberrypi/","title":"树莓派"},{"content":"最近在某海鲜市场淘了台ThinkPad X220，记录一下ArchLinux的配置过程\nThinkPad向来有着笔记本界最好的键盘手感，其余配置如下\nCPU 2520M 双核 Memory: 4+4GB Storage: 500G Samsung 860evo msata Display: 1366*768 为什么使用 Linux\n避免Windows在老设备上的高资源消耗，比如偷偷更新 为什么使用Arch\n精简、高度自定义，完善的包管理pacman 为什么使用i3wm窗口管理器\n分屏很方便，完全键盘操作，很geek 安装Archlinux 参考官方中文安装教程\n前往官网下载镜像，使用rufus将镜像写入U盘，并从U盘启动\n以下为UEFI引导，单sata硬盘，全盘安装方法，\nArchLinux使用滚动更新，也就是说时刻都保持最新版，所以需要联网安装\n这里使用有线网安装\ndhcpcd 更新系统时间\ntimedatectl set-ntp true 分区与格式化\n查看目前分区 fdisk -l 创建引导分区，sda表示第一块sata硬盘，也有可能是其他 fdisk /dev/sda 如果是新硬盘，输入g创建全新的gpt分区表 输入n创建一个新的分区，选择起始扇区和分区大小，前者默认，后者输入+512M 输入t并选择新创建的分区序号来更改分区的类型，输入l查看所有支持的类型，输入ef更改分区的类型为EFI 输入w写入磁盘，输入p来确认分区表 格式化刚刚创建的引导分区 mkfs.fat -F32 /dev/sda1 创建根分区\n输入n创建一个新的分区，选择起始扇区和分区大小，全部默认表示使用全盘安装。 输入w写入磁盘 格式化根分区 mkfs.ext4 /dev/sda2 挂载分区\nmount /dev/sda2 /mnt\rmkdir /mnt/boot\rmount /dev/sda1/ mnt/boot 选择镜像\nvim /etc/pacman.d/mirrorlist 在文件首加入\nServer = http://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch 安装基本软件\npacstrap /mnt base base-devel linux linux-firmware dhcpcd 生成自动挂载分区的fstab文件\ngenfstab -L /mnt \u0026gt;\u0026gt; /mnt/etc/fstab 将权限切换到新安装的系统\narch-chroot /mnt 设置时区\nln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime\rhwclock --systohc 安装其他软件\npacman -S vim dialog wpa_supplicant ntfs-3g networkmanager netctl 设置语言，找到zh-CN和en_US行，取消注释\nvim /etc/locale.gen 生成\nlocale-gen 设置系统语言\nvim /etc/locale.conf 写入\nLANG=en_US.UTF-8 设置主机名，在首行输入主机名，这里是ThinkPad-X220\nvim /etc/hostname 同样\nvim /etc/hosts 写入\n127.0.0.1\tlocalhost\r::1\tlocalhost\r127.0.1.1\tThinkPad-X220.localdomain\tThinkPad-X220 设置Root密码\npasswd 安装微码，此处为因特尔处理器\npacman -S intel-ucode 安装Bootloader\npacman -S os-prober ntfs-3g\rpacman -S grub efibootmgr\rgrub-install --target=x86_64-efi --efi-directory=/boot --bootloader-id=grub\rgrub-mkconfig -o /boot/grub/grub.cfg 重新部署linux内核\npacman -S linux 退出\nexit 取消挂载\numount /mnt/boot\rumount /mnt 重启\nreboot 然后就进入了Archlinux的命令行界面，用户名是root，密码是刚才设置的密码，到此安装结束\n新建用户 设置用户名和组\nuseradd -m -G wheel nagisa 设置用户密码\npasswd nagsia 切换到root用户\nsu 安装sudo\npacman -S sudo 将vi链接到vim\nln -s /usr/bin/vim /usr/bin/vi\rvisudo 取消%wheel ALL=(ALL)ALL前的#注释\n退出root\nexit 桌面环境 联网\ndhcpcd//有线网\rwifi-menu//无线网 安装显卡驱动，参考这里，此处为intel集成显卡\nsudo pacman -S xf86-video-intel 安装Xorg\nsudo pacman -S xorg 安装桌面管理器，此处为lightdm\nsudo pacman -S lightdm 设置开机自动启动\nsudo systemctl enable lightdm 安装桌面环境, 比较著名的有Gnome、KDE(Plasma)、Xfce，此处使用i3wm\nsudo pacman -S i3wm 如果安装了桌面管理器，重启的时候就有图形界面可以选择了\n第一次进入i3，非常简陋，但是不要慌\n安装各种软件\nterminal\tst 输入法\tfcitx fcitx-config-tool 字体\tttf-dejavu 浏览器\tfirefox 文件管理器\tpcmanfm ranger 命令行工具\tzsh neofetch htop 其余的配置文件保存在我的github中，如i3快捷键，字体缩放比例，个性化bar等\n","permalink":"https://nagisa3113.github.io/posts/arch/","title":"给ThinkPad-X220安装ArchLinux"},{"content":"先提出一个问题: 为什么C语言可以嵌套定义类,但是不能嵌套定义函数?\n反过来我们可以想想: 如果可以在函数中定义函数会发生什么?\n主要内容\n匿名函数、lambda表达式 闭包 高阶函数、科里化 纯函数 函数式编程 模板元编程 C#，C++11通过支持Lambda表达式(本质上是匿名类)来实现类似功能\n匿名函数 简化程序中使用次数少的函数，不用显式定义函数名，但编译期还是会在背后定义，是一种语法糖（其实还有匿名类…）\n//C# 使用关键字delegate,表示一个参数为(int, double) 返回值为double 的函数 delegate double (int a,double b) { return a + b ; } lambda表达式 匿名函数的进步一简化\n//与匿名函数相同,但是可以省略delegate和其他符号(有限制) (int x,double y) =\u0026gt; { return x * y; }\t//自动推断返回值类型 x =\u0026gt; x+5; () =\u0026gt; PI;\t//返回常量 用途\n委托 LINQ 闭包 捕获变量\n闭包会延长它使用的外部变量的生命周期，直到闭包本身被释放,不会被垃圾回收\nFunc\u0026lt;int\u0026gt; T1() { int i = 0; //i是局部变量,应该分配在栈上 Func\u0026lt;int\u0026gt; T2 = () =\u0026gt; ++i; //捕获了外部变量i return T2; //i的作用范围结束,i应该消失 } var s = T1(); s();\t//i = 1 s();\t//i = 2 .NET本身并不支持函数对象，它依然满足对象生命周期的规则。编译器在背后会生成一个类,将局部变量i变成该类的一个属性，从而保证了变量的生命周期不会随函数T1调用结束而结束。\nC#中，闭包其实和类中其他属性、方法是一样的。它们的原则都是下一层可以调用上一层定义，但上一层则不具备访问下一层设定的能力。即类中方法里的变量可以自由访问类中的所有属性和方法，而闭包又可以访问它的上一层即方法中的各种设定，但类不可以访问方法的局部变量。同理，方法也不可以访问其内部定义的匿名函数所定义的局部变量。\n延迟调用\nList\u0026lt;Func\u0026lt;int\u0026gt;\u0026gt; funcs = new List\u0026lt;Func\u0026lt;int\u0026gt;\u0026gt;(); for (int i = 0; i \u0026lt; 3; i++) { funcs.Add(() =\u0026gt; { return i; }); } foreach(var item in funcs) { Console.WriteLine(item().ToString());\t// 3,3,3 } 高阶函数 函数可以接受另一个函数作为输入参数，同时也可以返回一个函数\n// 使用LINQ查询出数组中的奇数 int[] ints = { 5, 2, 0, 66, 4, 32, 7, 1 }; List\u0026lt;int\u0026gt; list = IntExtension.where(ints, (item) =\u0026gt; item % 2 != 0;).ToList(); //等同与下面代码 List[] Find(int[] ints, Func\u0026lt;int,bool\u0026gt; check){ List[] result; foreach(int i in ints){ if(check(i) == true){ result.Add(i); } } return result; } bool Check(int item){ if(item % 2 != 0) return true; } Find(ints,Check);\t//将函数Check传入函数Find,类似函数指针 科里化 Currying就是将需要多个参数的函数转换为「接受一个参数；返回一个值」的函数\n实现方法: 当提供较少的参数时，返回一个等待剩余参数的新函数\n好处:\n参数可复用，对部分参数的复用,无需重复添加 可以提前返回，存在返回值，并且可以继续接收参数的函数 延迟运行，不断的柯里化，累积传入的参数，最后执行 这样对于讨论和优化会更加方便。\n// 原函数 function add(a, b, c) { return a + b + c; } // 柯里化函数 function addCurrying(a) { return function (b) { return function (c) { return a + b + c; } } } // 调用原函数 add(1, 2, 3); // 6 // 调用柯里化函数 addCurrying(1)(2)(3) // 6 //参数复用 var add1 = add(1); var add2 = add(2); add1(3);\t//1+3 add2(3);\t//2+3 //延迟计算 add(1,2)(3); add(4); add(); // 10 //经过修改还可以接受任意数量的参数 add(1, 2, 3, 4)(5)\t// 15 add(1, 2)(3, 4)\t// 10 add(1, 2)(3)(4)\t// 10 纯函数 当参数相同时，永远返回相同的结果，并且不依赖于任何外部状态或数据 函数不会发生任何突变(mutation)或产生任何副作用(side effect)，如修改外部状态 优点:\n简洁，容易阅读 易于并发编程，不需要考虑死锁(deadlock) 测试方便 // 函数内部使用的变量是显式传递进去的 function f(x){ return function g(x){ //g(x)是会依靠f(x)的参数返回的,g(x)相当于拥有f(x)的闭包 return x * x; } } 问:纯函数式的闭包和不改变函数状态的特性是否矛盾\n闭包虽然可以把闭包外部的变量捕获到闭包内部，但是闭包还是满足不改变状态的特性的。\n虽然传入了不同参数，但是闭包里面的整体算法是没有变化的。g(x)虽然每次都会由f(x)传入的x值变化而变化，但是g(x)整体算法就是计算x的平方，这个计算方法是没有变化的，不根据外部状态改变而改变的。\n函数式编程 (1 + 2) * 3 - 4 subtract(multiply(add(1,2), 3), 4) add(1,2).multiply(3).subtract(4) 函数是“第一等公民”(first class)\n函数与其他数据类型一样,可以赋值给其他变量，也可以作为其他函数的参数和返回值\n使用“表达式”代替“语句”\n表达式(expression)是一个单纯的运算过程，总是有返回值；语句(statement)是执行某种操作如赋值，没有返回值。函数式编程要求每一步都是单纯的运算，而且都有返回值\n没有\u0026quot;副作用”\n函数式编程强调没有\u0026quot;副作用”，所有功能就是返回一个新的值，没有其他行为如修改外部变量的值。\n不修改“状态”\n通常用变量来保存\u0026quot;状态”(state), 但在函数式编程中常使用递归参数保存状态\n引用透明(Referential transparency)\n函数的运行不依赖于外部变量或\u0026quot;状态”，只依赖于输入的参数，任何时候只要参数相同，得到的返回值总是相同的\nvar c = 10; function addC(a, b) { return a + b + c; } addC(1,2)\t//1+2+10; addC(3,4)\t//3+4+10; //改变c addC(1,2)\t//1+2+10 c=20; addC(1,2)\t//1+2+20 //C就成为了一种状态(State)，它的变化可以左右函数的输出,也就是产生副作用,再来看下面一个例子 var c = 10; function addC(a,b){ return a + b + (c++); } addC(1, 2)\t//1+2+10; addC(1, 2)\t//1+2+11;改变了状态 //不同时间调用add()产生的结果不同 //将输出仅取决于输入的参数 //将语句 c = 10 变成表达式 function getC(){ return 10 } function addC(a, b) { return a + b + getC() //return a + b + 10 } //输出仅取决于输入的参数。 //不修改状态意味着我们就不使用赋值和变量了吗? //抛弃了“=” //不使用状态如何控制程序运行顺序? //计算累加 function countSum (num) { var result = 0\t//var i 作为状态(state)控制了函数内部的循环,但它还是一个纯函数 for (var i = 1; i \u0026lt; num; i ++) { result += i } return result } function countSum (num) { return num = 1 ? 1 : num + countSum(num-1)\t//通过递归,使用函数参数保存状态 } 模板元编程 C++ 模板元编程不是设计之初的功能，是意外发现的“黑魔法”，它用来编写编译期运行的程序，也就是可以将运行期间的计算转化为编译期的计算\n数值计算 template\u0026lt;int N, int M\u0026gt; struct meta_Add{ static const int value = N + M; } meta_Add\u0026lt;1, 2\u0026gt;::value\t//3 模版元程序在编译期执行，不能使用运行期间的if-else、for、while等语句，但可以通过递归形式实现循环，通过模板特例化实现条件判断，这两点使得其具有和普通语言一样通用的能力（图灵完备性）。\n从编程范式上来说，C++模板元编程是函数式编程\ntemplate\u0026lt;int N\u0026gt; struct meta_Sum{ enum { Result = meta-Sum\u0026lt;N-1\u0026gt;::Result + N }; }; template \u0026lt;\u0026gt;\t//特化 struct meta_Sum\u0026lt;1\u0026gt;{ enum { Result = 1 }; }; 类型计算 数值计算在模板元编程中用的很少，真正有价值的是类型计算，通过模板提供的参数化的类型，可以补充C++自带的类型，使得类型系统更加智能与完备。一般来说在运行期发生的类型错误很难发现和调试。通过模板元编程，在编译期就可以对类型进行检查，从而避免运行期出错。\n一个典型的例子是物理量计算的量纲问题\ntypedef tyVector\u0026lt;int, 1, 0, 0, 0, 0, 0, 0\u0026gt; Length;\t//长度,单位m typedef tyVector\u0026lt;int, 0, 1, 0, 0, 0, 0, 0\u0026gt; Mass;\t//质量,单位kg typedef tyVector\u0026lt;int, 0, 0, 1, 0, 0, 0, 0\u0026gt; Time;\t//时间,单位s typedef tyVector\u0026lt;int, 0, 0, 0, 1, 0, 0, 0\u0026gt; I;\t//电流,单位A typedef tyVector\u0026lt;int, 0, 0, 0, 0, 1, 0, 0\u0026gt; K;\t//热力学温度,单位K typedef tyVector\u0026lt;int, 0, 0, 0, 0, 0, 1, 0\u0026gt; n;\t//物质的量,单位mol typedef tyVector\u0026lt;int, 0, 0, 0, 0, 0, 0, 1\u0026gt; lv;\t//发光强度,单位cd auto velocity={1,0,-1,0,0,0,0}; tymeta::quantity\u0026lt;float, tymeta::Length\u0026gt; len(10.23);\t//长度 tymeta::quantity\u0026lt;float, tymeta::Time\u0026gt; t(5);\t//时间 tymeta::quantity\u0026lt;float, tymeta::Mass\u0026gt; m(10);\t//质量 auto speed = len / t;\t//速度 //类型为quantity\u0026lt;float,struct tymeta::tyVector\u0026lt;int,1,0,-1,0,0,0,0\u0026gt;\u0026gt; auto a_speed = speed / t;\t//加速度 //类型为quantity\u0026lt;float,struct tymeta::tyVector\u0026lt;int,1,0,-2,0,0,0,0\u0026gt;\u0026gt; auto force = a_speed * m;\t//力 //类型为quantity\u0026lt;float,struct tymeta::tyVector\u0026lt;int,1,1,-2,0,0,0,0\u0026gt;\u0026gt; //但一旦出现 auto r = force + speed; //会得到一个编译期的错误 ","permalink":"https://nagisa3113.github.io/posts/functional-programming/","title":"函数式编程"},{"content":"从启发式搜索算法到A*算法的优化\n启发式搜索算法 Heuristic Algorithm:\n$f(n)=g(n)+h(n)f(n)=g(n)+h(n)$\nn表示当前的点，g(n)为从起始点到点n的实际代价，h(n)为从点n到目标点的估价n表示当前的点，g(n)为从起始点到点n的实际代价，h(n)为从点n到目标点的估价\nBFS(Best First Search): $f(n) = h(n)$ Dijkstra: $f(n)=g(n)$ A: $f(n) = g(n) + h(n)$ A*: $f(n) =g^*(n) + h^*(n)$ A*寻路在没有障碍物时的寻路过程与BFS相同\nA*寻路在有障碍物时寻找的路径和Dijkstra算法寻路结果相同，找到了最短的路径且效率和BFS差不多\n一种极端情况，如果h(n)是0，则只有g(n)起作用，此时A*演变成Dijkstra算法，这保证能找到最短路径。 如果h(n)经常都比从n移动到目标的实际代价小（或者相等），则A保证能找到一条最短路径。h(n)越小，A扩展的结点越多，运行就得越慢。 如果h(n)精确地等于从n移动到目标的代价，则A将会仅仅寻找最佳路径而不扩展别的任何结点，这会运行得非常快。 如果h(n)有时比从n移动到目标的实际代价高，则A*不能保证找到一条最短路径，但它运行得更快。 另一种极端情况，如果h(n)比g(n)大很多，则只有h(n)起作用，A*演变成BFS算法。 A* 优化 审美优化 直路径 设置非直路径的处罚值,使用代价函数,如果被考虑的新一步与上一步不是直线相连,就加入一个额外代价(处罚因子)\n多边形空间的直路径。多边形不像矩形栅格那样形状一致,可能不存在所谓的直线路径,此时可以通过后处理,即在路径计算出之后对它的直线性进行优化\n平滑路径 通过A*计算出的路径通常有许多急转弯,使其看上去很不自然,此时应用 转动减幅技术(rotational dampening)可以稍微掩饰一下,但是在锐角转角处将摆动得很厉害,在计算机图形学中有一个算法可以使其变得更加平滑,那就是Catmull-Rom样条(Bezier曲线也比较平滑但不能经过所有的控制点)\nCatmull-Rom公式要求4个点,然后会给出一条位于第2个点和第3个点之间的光滑曲线\n有了Catmull-Rom公式,你所需要做的就是找出A*所有经过的点,在开始时把第一个点输入2次,在结束时最后一个点也输入2次,得到的新路径的点数是原来的4倍,此时通过一个剪除路径共线点的函数可以显著减少点数量\n分级路径(hierarchical pathing) 该方法常用来减少大范围寻路的计算量,其思想是首先找到大范围的路径,然后再在局部进行寻路,但由此会使路径变得不自然\n有一种简单的方法可以得到理想的路径,但会花费2倍的时间,那就是找到下下个要抵达的目标，在进入下个目标时重新执行这一过程\n优化响应率 当玩家发出一条寻路命令时,希望个体能够立即响应,但CPU需要花费一段时间计算路径,于是,在CPU给出答案前需要使用一些技巧给玩家提供及时响应的感觉\n播放一种确定接受到了命令的声音进行延迟 播放一个“准备好移动”的动画进行延迟,表示角色即将行走,实际上它可能一步也不走,或是转向“最有可能的方向” 使角色走向“最有可能猜中”的方向,但有可能完全猜错 群体移动时的技巧\n将请求排队,使得一部分角色先走 选择群体中的一个头目,其他个体跟随头目 速度优化 空间划分 矩形栅格: 规则的正方形栅格 四叉树: 用四叉树的方法递归地将一个正方形划分为四个更小的正方形 凸多边形 可见点 广义圆柱体 启发式函数的设计 采用高估的启发式代价,可以通过Open表和Close表的大小进行调整估计出一个合理的值\n优化open表 使用优先队列,优先队列可以作为一个二分堆(binary heap)实现,它是一个排序树,它的特性是双亲节点总是比它的孩子节点具有更低的值,因此插入和提取元素(删除最小元素)的时间复杂度仅为O(logn)O(logn)\nA*改进算法 D* A*算法的动态版本\nTheta* A* with post-smoothed paths\nLazy Theta*的核心思想在于，将line of sight(LOS)检查延迟到打开该节点为止。\nJPS（Jump Point Search） 参见\n优化\nJPS-Bit:位运算优化 JPS-BitPrune:位运算与剪枝优化 JPS-BitPre(JPS+):位运算与预处理 提前判断可达性 参考 《Game Programming Gem》\n","permalink":"https://nagisa3113.github.io/posts/pathfinding/","title":"寻路"},{"content":"在近日的索尼 PlayStation “State of Play”上公布了许多新游戏，其中《Humanity》展现了模拟人类集体行为，效果非常震撼。\n主要内容\nObstacle Avoidance Flocking Obstacle Avoidance 障碍物躲避属于路径规划中的底层算法，与此相对的高层算法有dijkstra,A*等\n碰撞判断 为了便于计算，我们将角色视为质点，于此同时让障碍物的碰撞半径扩大角色自身宽度的一半\n判断是否相交，其中$\\vec{v}$ 为当前速度与预测时间$t$的乘积，$t$越大，感知的范围也越大，可以更早地避开障碍物，但更消耗性能\n$\\vec{p}$为向量$\\vec{a}$在速度$\\vec{v}$上的投影，$\\vec{b}=\\vec{p}-\\vec{a}$\n当$|\\vec{b}|-|\\vec{r}|\u0026lt;0$时，代表未来可能发生碰撞，这时需要给其添加两个力的作用，侧向操控力使其远离障碍物，与$\\vec{b}$的大小成负相关，制动力使其减速，方向与当前速度相反，大小正比于$\\vec{a}$\n上述方法是通过施加力的作用避开障碍物，下面介绍的方法是改变速度\nVO(Velocity Obstacle) 即：排除未来有可能会发生碰撞的速度\nVO是指速度方向与B相交的部分，即会发生碰撞的部分（图中灰色部分)，VO会排除未来所有可能会发生碰撞的速度(例如$\\vec{v_2}$在短时间内不会发生碰撞，但被舍弃了)\n遇到可移动的障碍物时,直接求$\\vec{V_A}$绝对速度的VO而不是$\\vec{V_A-V_B}$相对速度的VO，将相对速度下的VO延$\\vec{V_B}$方向平移，新的VO为右深色三角形区域\nRVO(Reciprocal Velocity Obstacle) VO的一个缺点是，当存在大量障碍物或可移动的障碍物时，会频繁改变速度产生抖动现象，例如当两个使用VO的物体相遇时，会产生左图的现象，RVO则是在VO基础上的优化(右图)\nRVO的解决方案：缩小VO的大小以减少速度的突变\n从另一个方面会更好理解，不直接选择VO外的速度，而是选择当前速度与新速度的平均值，从某种程度上认为，对方也会做出相应回避行为，详细推导证明过程见Reciprocal Velocity Obstacles for Real-Time Multi-Agent Navigation有个有趣的问题是，当双方直面相遇时，如何避免双方选择相同的躲避方向？\n还有一个优化算法是ORCA\n触角(Feeler) 模仿动物，我们还可以在物体前添加三根触角，分别测试他们是否和障碍物相交，其转向力与渗透深度成正比\nFlocking 群聚算法最早由Craig Reynolds 于1987 在SIGGRAPH上提出\nFlocks,Herds,and Schools: A Distributed Behavior Model\n其image是三个组行为的组合: separation(分离),alignment(对齐),cohesion(聚合)，你需要仔细调节它们间的权重以获得满意的群组行为，一个好的方法是使用势函数(potential function),在物理学中，它根据分子的接近程度产生引力和斥力，我们同样可以用在游戏单位身上\nLenard−Jones:U=−Arn+Brm\nFOV(field of view) 首先，在一个组群中，每个单位都需要感知周围局部环境的情况，感知范围(视野)的确定对群体行为的影响很大\n半径 大半径容易产生凝聚性更强的群体，不容易发生落单现象 小半径容易让整个群体分裂，在绕过障碍物之后容易形成小群体 视野 宽视角容易得到组织良好的群体,遇到障碍物时，群聚会倾向分开，从两边绕过障碍物，在某些情况下，他们会迅速重组，但某些情况下不会。 窄视野容易看起来有领导核心，单位倾向排成单一纵队平滑地绕过障碍物而不会分开。 //获得周围单位，伪代码实现 for(unit in units){ if(unit.distance\u0026lt;radius \u0026amp;\u0026amp; unit.angle\u0026lt;view){ neighbors.Add(unit);//使用容器存储 } } Alignment 每个单位行动时，都要把自己对齐在其临近单位的平均方向上\nfor(unit in neighbors){ Dir += unit.velocity.normalized;//对速度进行归一 } avgDir = Dir / neighbors.lengths;//获得平均方向 direction = (avgPos - self.position).normalized; self.AddForce(direction - self.orward); Cohesion 每个单位都往临近单位的平均位置移动\nfor (unit in neighbors) { pos += unit.position; } avgPos = pos / neighbors.lengths;//获得平均位置 direction = (avgPos - self.position).normalized; self.AddForce(direction - self.forward); Separartion 每个单位行动时，要避免撞上其临近单位\nfor (unit in neighbors) { distance = unit.position - self.position; force += Calulate(distance);//通过距离计算分离力，通常成反比 } self.AddForce(force); Wander 有一个问题是，当一个单位和它的群组隔离了，它将什么都不做，为了防止这种情况发生，我们加入wander(徘徊)，这样所有的单位总可以保持运动。\n最初的做法是产生一个随机的驱动力，但这会产生抖动(事实上，一个好的随机函数如Perlin噪声可以产生光滑转弯，但CPU开销会很大)，Reynolds的解决方案是在前端凸出个圆圈，目标被限制在该圆圈上，然后每帧在目标添加一个随机的位移，通过调整圆圈半径，距离和随机位移产生一个没有抖动的往复运动\n领头者 通过当前单位前方视野内的其他单位数量判断是否是领头者，也可以使用tag标记领头者，给他赋予单独的AI，一般领头者不太需要遵循上述群聚规则。\n综合以上便可产生一些有趣的战术行为，例如，大半径窄视野并带有领头者的群组，就像秩序良好的突击队在半夜执行机密任务\n事实上我们还有很多可以优化的地方，例如：\n对于突变的速度与方向，如何实现自然的转向 如何处理运动中不能后退和停止的物体，如飞行中的鸟 对于大量的群体，可以通过空间划分优化对临近单位的查找 参考 Steering Behaviors For Autonomous Characters 《programming-game-ai-by-example》 《AI for game developers》 ","permalink":"https://nagisa3113.github.io/posts/flocking/","title":"自治的可移动游戏智能体"},{"content":"控制反转(Inversion of Control，IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。常用于Web开发,如Spring MVC。\n它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。\n通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体(容器)。\n举个例子，我们创建了一个英雄(Hero)，他的组件有武器和铠甲，我们如何去获得一个武器呢,\n传统方式: 在英雄脚本中 new 一个 Weapon 出来 ,该对象的创建、销毁、生命周期都由Hero控制,Hero依赖Weapon,耦合度高 IOC: 容器先创建好Weapon,当Hero需要时,从该容器中取出要用的Weapon交给Hero使用,至于容器怎么创建Weapon的,Hero不需要关心 IoC主要实现方式有两种：\n依赖查找(Dependency Lookup）：容器提供回调接口和上下文环境给组件。\n例如Unity中 GameObject.Find(Name)\n依赖注入(Dependency Injection）：组件不做定位查询，只提供普通的方法让容器去决定依赖关系。\n其又有三种方式,拿之前Hero的例子来说:\n接口注入(Interface Injection): 让英雄继承SetObject()接口,在英雄中实现SetObject(Weapon)方法 设值注入(Setter Injection): 在类中写一个方法,SetWeapon(content),让外部容器传调用传入依赖 构造子注入(Constructor Injection): 在英雄的构造函数中写方法,Hero(content),在建立对象时传入依赖. StrangeIoC StraneIoC是一个轻量、高扩展性的Unity,C#的IoC框架,其使用的方式为依赖注入.\nStrangeIoC官网一张图可以概括,我们先继续往下看 官方给出的例子: 假如我在玩一个游戏,每次结束时如果获得了更高的分数,想要将最高分上传到Facebook,在传统Unity方式下,会是这样的\npublic class MyShip : MonoBehaviour { private FacebookService facebook; private int myScore; void Awake(){ facebook = FacebookService.getInstance(); } void onDie(){ if (score \u0026gt; highScore)\tfacebook.PostScore(myScore); } } 这样写会导致游戏本身逻辑和服务器紧密相连;如果我们将facebook替换成Twitter或Google+，会变得麻烦\n但在IOC中，我们移除了逻辑部分，只需要发出一个信息(事件)–“游戏结束了”，让Command单元去处理该事件\npublic class MyShip : MonoBehaviour { void onDie(){ dispatcher.Dispatch(GameEvent.SHIP_DEAD); } } public class OnShipDeathCommand : EventCommand { [Inject] ISocialService socialService{get; set;} [Inject] IScoreModel scoreModel{get; set;} override public void Execute() { if (scoreModel.score \u0026gt; scoreModel.highScore) socialService.PostScore(scoreModel.score); } } [Inject]注入的是实现接口的类而不是特定的类,在这个例子中，我们就可以不再依赖具体的Facebook或Twitter，我们只用知道需要一个社交服务。\n最后，我们需要将他们绑定起来\n#if UNITY_ANDROID injectionBinder.Bind\u0026lt;ISocialService\u0026gt;().To\u0026lt;GoogleService\u0026gt;().AsSingleton(); #else injectionBinder.Bind\u0026lt;ISocialService\u0026gt;().To\u0026lt;FacebookService().AsSingleton(); #endif //...or... //injectionBinder.Bind\u0026lt;ISocialService\u0026gt;().To\u0026lt;MultiServiceResolver\u0026gt;().AsSingleton(); injectionBinder.Bind\u0026lt;IScoreModel\u0026gt;().To\u0026lt;ScoreModel\u0026gt;().AsSingleton(); commandBinder.Bind(GameEvent.SHIP_DEAD , OnShipDeathCommand); AsSingleton()的意思是，每次通过[Inject]注入ISocialService类型的对象时,获得的都是同一个GoogleService实例。\n虽然出现了Singleton(单例),但我们不需要写一个单例模式,只用绑定它就行。\n这样每个单元都是独立的,保证了灵活性和可维护性。\n","permalink":"https://nagisa3113.github.io/posts/ioc/","title":"控制反转与依赖注入"},{"content":"禅是纯粹的体验，不存在于任何言语文字之中。一位追求生命意义的德国哲学教授，远渡重洋来学习禅的真义。处处碰壁之后，透过了箭术，他体验到最活生生的禅。在禅的描述上，他的追寻记录达到了文字的极至。\nEugen Herrigel\n鲁宓 译\n目录 译者序\n序─铃木大拙\n禅与日本艺术\n从学禅到学射箭\n心灵拉弓\n不放箭的放箭\n以心传心\n箭术的大道\n结束与开始\n从箭术到剑道\n附录─禅道\n译者序 这是一本优美而奇妙的书，篇幅虽短，所处理的却是最困难的一项工作；以文字来传达那不可描述的真理体验。\n一个德国的哲学教授奥根、海瑞格，为了追求在哲学中无法得到的生命真义，来到东方的日本学禅。他个人的追寻际遇却具有重大的文化意义：非常难能可贵的，一个具有西方理性思想精髓的学者，以不偏不狻的态度，亲身深入了东方的直观智慧，并能以客观平实的文字加以报导分析。译者个人觉得，在使用文字来描述真理上，这是要比种种冠冕堂皇的经典教义更为有效的作法，可遇而不可求。因为通常那些有修为的高僧在说法立经时，在文字的使用上反而容易犯下老生常谈的毛病，自说自话，了无新意。不过反正这些高僧也不在意。根据海瑞格教授自己的说法，身为欧洲人，他有困难直接学禅，所以不得不藉助一项运动。其实他这样做，就是以行动来直接切入禅的精神，正符合禅的要旨。禅是活生生的体验，不存在于任何言语文字中。海瑞格教授的理性哲学训练背景，使他在文字上不遗余力地避免落入感性或煽情的陷阱，但是深沉的情感仍然不自禁地从字里行间中流露出来，真实而不娇柔做作，别具有动人的力量。\n我们也可看到，一个崇尚东方神秘的西方人观看我们这里的「远东文化」时，不可避免加以浪漫化的现象。可悲的是，海瑞格教授所追寻的，不仅在欧洲早已不复见，也是我们自己早已丧失，只能在心中向往的理想境界。\n本书后半段的附录是海瑞格教授对于禅道的个人心得笔记。他由外而内，对于禅的特殊观点与整个学习过程，从最初的入门到神秘的开悟，以及甚至在开悟之后会遭遇的种种心路历程，都提供了极精彩与清晰的见解。在这里他发挥了自己敏锐的哲学思维，与先前的箭术学习报告形成了很有趣的对比。\n序 在箭术中，事实上在所有属于日本，以及远东国家的艺术中，最显著的一个特征是，那些艺术并不具有实用或纯粹欣赏娱乐的目的，而是用来锻炼心智；诚然，使心智能接触到最终极的真实。因此，箭术不仅是为了要击中目标；剑手挥舞长剑不仅是要打倒对手；舞者跳舞不仅是要表现身体的某种韵律。心智首先要熟悉无意识。\n如果一个人真心希望成为某一项艺术的大师，技术性的知识是不足够的。他必须要使技巧升华，使那项艺术成为「无艺之艺」，发自于无意识之中。\n在箭术中，射手与目标不再是两个相对的事物，而是一个整体。射手不再把自己意识为一个想要击中对面箭靶的人。只有当一个人完全虚空，摆脱了自我，才能达到如此的无意识境界，他与技巧的完美成为一体；然而其中蕴藏著十分奥妙的事物，无法藉由任何按部就班的艺术学习方式来达到。\n禅与其他所有宗教，哲学，神秘法门的教诲最大的不同是，禅虽然从未脱离我们日常生活的范畴，尽管它的作法实际与明确，禅具有某种东西使它超然独立于世界的混乱与不安之外。\n在这里我们接触到了禅与射箭之间的关系，以及其他的艺术，诸如剑道，花道，茶道，舞蹈，还有绘画等等。\n禅是「平常心」，如马祖禅师（卒于西元788年）所说；「平常心」就是「饿了就吃，困了就睡」。一旦我们开始反省，沉思，将事物观念化后，最原始的无意识便丧失了，思想开始介入。我们吃东西时不再真正吃东西，睡眠时也不再真正睡眠。箭已离弦，但不再直飞向目标，目标也不在原地。误导的计算开始出现。箭术的整个方向都发生错误。射手的困惑心智在一切活动上都背叛了自我。\n人类是会思考的生物，但是人类的伟大成就都是在没有计算与思考的情况下产生的。经过了长年的自我遗忘训练，人类能够达到一种「童稚」的纯真状态。在这种状态中，人类不思考地进行思考。他的思考就像是天空落下的雨水；海洋上的波涛；夜空闪烁的星辰；在春风中飘舞的绿叶。的确，他就是雨水，海洋，星辰，与绿叶。\n当一个人到达了如此的「精神」境界时，他就是一个在生活艺术中的禅师。他不象个画家般　要画布，画笔，和颜料；他也不象个射手般　要弓箭与箭靶，和其他用具。他拥有他的四肢，身体，头，和其他部份。他的禅是透过所有这些「工具」来表现自己。他的手脚便是画笔，整个宇宙便是画布，他在上面描绘他的生命七十，八十，甚至九十年。这幅画叫做「历史」。\n五祖山的法演禅师（卒于西元1140年）说：「此人将虚空做纸，海水为墨，须弥山做笔，大书此五字：祖─师─西─来─意（注一）。对此，我铺起我的坐具（注二），深深顶礼敬拜。」\n有人会问：「这段奇怪的文字是什么意思？为什么有如此表现的人值得最高的敬意？」一个禅师也许会回答：「我饿了就吃，困了就睡。」如果他喜爱大自然，他也许会说：「昨日天晴，今日下雨。」然而，对读者而言，问题仍然存在，「射手在什么地方呢？」\n在这本奇妙的小书中，海瑞格先生，一位德国的哲学家来到日本，藉著学习箭术来体验禅，生动地报告了自己的经验。透过他的表达，西方的读者将能够找到一个较熟悉的方式，来面对一个陌生而时常无法接近的东方经验。\n铃木大拙 爱普斯卫，麻塞丘塞州，美国 1953年5月\n注一：这五个中国字的字面意思是「祖师来到西方的首要动机」。这个主题时常在公案中被提及，意味著询问禅的最核心意义。在适当的　解下，禅就是自身。\n注二：坐具（Zagu）是禅师随身携带的物件之一。当他要向佛祖或导师顶礼时，会摊开在他身前。\n1禅与日本艺术 初看之下，不管读者是否了解禅这个字，把禅与射箭之类的事放在一起似乎对禅是很大的不敬。就算读者肯退让一步，发现射箭也可被当成一种「艺术」，但若要读者去探究这项艺术背后所隐藏的意义，而不只把它当成一种运动表现，读者可能私底下会感到勉强。因此读者会希望有人说明这项日本技艺的奥妙成就。在日本，弓箭的使用是渊源已久，备受尊重的传统。在远东，古老的战斗技能被现代武器所取代还是很近代的事，弓箭的使用没有被荒废，反而更加普及，在不同的领域中发扬光大起来。因此难免会有人假设，说不定今日在日本，箭术已经成为一项全国性的运动？\n这个想法是大错特错的。在日本传统中，箭术是被尊为一项艺术，当成民族的传承，因此乍听起来奇怪的是，日本人非但不把箭术当成运动，却把它当成一种宗教仪式。所以，在谈到箭术的「艺术性」时，他们并不认为那是运动者本身的能力，或多或少可由身体的训练来控制；而是一种心灵训练所达到的能力，其目标在于击中心灵上的靶，所以根本上，射手瞄准了自己，甚至会击中自己。\n这听起来无疑令人困惑。读者会说，什么？曾经攸关生死大事的箭术不但没有成为一项运动，反而降级为一种精神练习？那么弓、箭、与靶又有什么用呢？这不是否定了古老箭术的阳刚艺术性与诚实的意义，而以一些模糊不清，甚至空幻的概念取而代之？但是我们要知道，箭术艺术中的特殊精神自古就与弓箭本身息息相关，非但不需要重新建立与弓箭的关系，现在反而更加明显，大家都相信箭术的精神已不再是为了流血的斗争。但如果说箭术的传统技术已不著重于战斗，而变成一种愉快而无害的消遣，这也是不正确的。箭术的「大道」（Great Doctrine）有极不同的说法。根据「大道」，箭术仍然是生死攸关的大事，是射手与自身的战斗；这种战斗不是虚假的替代，而是一切外在战斗的基础，包括与一个有形对手的战斗。射手在与自己的战斗中揭露了这项艺术的秘密本质，虽然舍弃了武士斗争的实用目标，也不会降低它的任何实质意义。因此在今日，任何接受这项艺术的人，都能够从它的历史发展中得到无可否认的帮助，使自己对于「大道」的理解不会被心中隐藏的实际目标所蒙蔽，因为这些实际目标将使大道的理解几乎成为不可能的。从古至今的箭术大师都会同意，要想接近这种艺术，只有那些心境「纯净」，不为琐碎目标困扰的人才能做到。\n从这个观点，也许有人会问，日本箭术大师们如何理解这种射手与自己的战斗，又如何加以描述呢？他们的回答听起来像是最深奥的谜。对他们而言，这项战斗是射手不瞄准自己地瞄准了自己，不击中自己地击中了自己，因此射手同时成为了瞄准者与目标，射击者与箭靶。或者，使用更接近大师心意的说法，就是射手必须克服自我，成为一个不动的中心。然后就会发生最大与最终极的奇迹：艺术成为「无艺术」，射击成为无射击，没有弓与箭的存在；老师再度成为学生，而大师成为新手，结束即开始，而开始即完成。对东方人而言，这些神秘的道理是清楚而熟悉的真理，但对我们而言则是完全的困惑。因此我们必须更深入研究这个问题。甚至连我们西方人都早已知道，日本的艺术内涵都具有共同的根源，那就是佛教。这一点在箭术，绘画，戏剧，茶道，花道，及剑道上都是一样的。它们都预设了一种精神境界，然后以各自的方式去达到这种境界。这种境界的最高形式就是佛教的特征，因此形成了一种僧侣的本质。在这里我不是指一般的佛教，也不是指我们在欧洲经由佛教文献所推论出来的具体佛教形式。我在这里所要探讨的是佛教中的禅宗，它完全不是一种推论出来的理论，而是一种直接的体验，正如追求生存意义的无底深渊一般，它是无法用理智来掌握的，一个人只能不知道地知道它；就算是达到了这种最明确与肯定的经验，仍然无法加以诠释；为了这些重要的经验，禅宗透过有系统的自我冥思禅定，发展出途径来引导个人在灵的最深处觉察到那无可名状，无根无性的本体─不仅如此，还要与之合一。在此诉诸于箭术，以很可能产生误导的言语来形容，就是由于心灵的训练，箭术的技巧变成一项艺术，如果适当地进行，能够成为「无艺之艺」，心灵的训练就是神秘的训练，于是箭术就绝不意味著外在的使用弓箭，而是内在的自我完成。弓与箭只是不必要的皮毛，只是达到目标的途径，而不是目标本身；弓与箭只是最后决定性一跃的助力而已。由以上这些来看，最适当的莫过于能直接聆听禅师的说明来帮助理解。事实上这种机会并不稀少。铃木大拙在他的「禅学丛论」中很具体地说明了日本文化与禅宗的密切关系，日本的艺术，武士道的精神，日本的生活方式，道德，美感，甚至日本的知性发展，在某种层面上都受到了禅宗的影响，如果不熟悉禅宗，就无法正确地理解日本。铃木大拙的重要著作及其他日本学者的研究，已引起普遍的兴趣。佛教的禅宗诞生于印度，经过了巨大的转变，在中国发展成熟，最后被日本所吸收，成为一种生活中的传统，直至今日。一般都承认，禅宗揭露了意想不到的生存之道，是我们迫切需要理解的。然而，尽管禅学专家的努力，对于我们欧洲人而言，洞察禅道精义的领悟仍然是很缺乏的。禅道似乎拒绝深入的探究，欧洲人的直觉在初步的努力后很快便碰上了无法越过的障碍。禅理藏在不可见的黑暗中，就像是东方的精神生活所酝酿出来的奇妙谜语：无法解释而又无可抗拒地吸引人。\n这种难以洞悉的痛苦感觉之所以存在，部份原因要归咎于禅宗所采取的说明方式。一般明理的人都不会期待禅师以超过暗示的方式来解说那些曾经使他自己解脱与改变的经验，或去试图描述他亲身以生活印证的不可思议「真理」。在这方面，禅宗就像是纯粹内省的神秘主义。除非我们直接参与进入了神秘的经验，否则我们就一直在外面打转，不得其门而入。这是所有真正神秘主义所遵循的法则，绝无例外。禅宗虽然有许多被当成神圣的经典存在，但这不构成矛盾。禅宗有特殊的作法，只向那些已经证明自己有资格体验真理的人揭露禅宗的生命真义，因此那些人可以从经文中得到印证，印证一些他们已经拥有，而又独立存在的事物。在另一方面，那些没有体验过的人即使以最刻苦无己的精神来探求，他们不仅会看不懂字里行间的意义，更会陷入最无助的精神混乱之中。就像所有的神秘主义，禅只能被一个本身进入神秘的人所解理，而不能用神秘经验之外的方法偷偷去获得。\n然而一个被禅所转变的人，通过了「真理之火」的试炼，其生命的表现是我们无法忽视的。于是我们受到心灵的驱使，渴望发现一条道路，通往造成如此奇迹的无名力量。但是仅仅靠著好奇是无用的，我们期望禅师至少能够描述那条道路，这种期望应该不算过分。没有一个玄学或禅的学生能够在一开始就达到自我完美。在他终于洞悉了真理之前，有多少事情必须克服与抛弃！他在那条路上，有多少时候要被孤独的感觉所折磨，觉得自己是在尝试不可能的事！但是有一天，不可能会成为可能，甚至可以自证。那么我们为何不能希望有人能为我们描述一下这条长而艰辛的路，让我们至少可以问自己一个问题：我们要不要走上这条路？\n对于这条路及其各阶段的描述，在禅宗的文献中几乎完全找不到。部份原因是由于禅师都极力反对任何具有形式的指导。禅师从自己的经验中得知，若是缺乏老师的引导与禅师的帮助，没有人能够一直走下去的。另一方面，同样明显的是，由于他的经验，他的克服及精神上的升华，只要仍旧是属于「他的」，就必须不断地再克服与升华，直到一切是「他的」都被消灭了。唯有如此，他才能得到一种基础，让「包含一切」的真理经验来提升他超越日常，个人的生活。他仍然生活著，但活著的已不是他的自我。\n从这个观点，我们可以理解为什么禅师总是避免谈论他自己和他的求道过程。不是因为他认为谈话是不谦虚的，而是因为他把谈话视为对禅的一种背叛。甚至连决定说一些关于禅的事，都会让他感到万分犹疑。他脑海中有一位伟大禅师的例子警告著他，那位禅师每当有人问他禅是什么时，他会寂然不动，彷佛没有听到问题似的。如此一来，又有什么禅师会想要尝试说明这位伟大禅师所置之不理，毫不在意的问题呢？\n在这些情况下，如果我自限于一些谜般的偈语或躲藏在一些响亮的言词之后，我就是在逃避我的责任。我的目标是去说明禅的性质，它如何深入影响了一项艺术。这种说明当然无法解释禅的根本，但是至少要显露有东西是存在于那无法看透的雾中，就像是夏季风暴欲来之前的闪电。理解这一点后，射箭的艺术就像是禅的一所预备学校，它让初学者能透过自己的手而对那些无法理解的事有较清楚的概念。客观说来，从我前面提及的任何一项艺术，都有可能到达禅的境界。\n然而我相信，去描述一个箭术学生必须完成的课程，是完成我的说明目标的最有效途径。更具体地说，我将要尝试叙述我在日本的六年时间中，跟随一位伟大的箭术老师学习的经过。所以是我的亲身参与容许我做如此的尝试。即使是预备学校，仍然有许多的谜题，为了使大家都能够理解，我只好详细地回溯我在成功地进入「大道」之前，必须克服的所有困难，所有障碍。我以自己现身说法，因为我找不到任何其他方法来达到我所立下的目标。为了同样的理由，我的报告将只限于最基本的细节，这样可使它们更清楚明白。我刻意避免描述这些教诲的背景环境与深深刻印在我回忆中的情景，以及最重要的，避免描述师父的形象─虽然这是非常难以克服的欲望。我要描述的一切都环绕著箭术，而有时候我觉得箭术的说明比学习还困难；这些说明必须够深入，让我们能瞥见在遥远的天际，禅所活生生存在呼吸的空间。\n2从学禅到学射箭 我为什么要学习禅，而且因此学习箭术，这里要加以解释。当我还是学生时，彷佛被某种秘密的冲动所驱使，我就对神秘主义之类的玄学别有向往，虽然当时的时代风尚并不鼓励这种兴趣。然而，尽管我费了很大的努力，我越来越清楚，我只能从外面去接触这些玄学的文字；虽然我知道如何在所谓的原始神秘现象周围绕圈子，我无法跃过那像高墙般环绕著神秘现象的界线。在庞大的玄学文献中，我也找不到我所要追寻的事物。在失望与挫折中，我逐渐明白，只有真正超然的人，才能理解什么是「超然」；只有那冥思的人，完全达到空灵无我的境界，才能与那「超然的实体」合而为一。因此我终于明白，除了靠个人亲身的体验与痛苦之外，没有其他道路通往神秘；若是缺乏了这项前提，一切言语都只是空谈罢了。但是，怎样才能成为一个进入神秘的人呢？如何才能达到那真实的超然，而不是空想呢？与那些大师们相隔了数世纪时光之遥的人们，是否还一条途径呢？生长于完全不同情况的现代人要怎么办呢？我从未找到任何满意的答案，虽然曾经有人告诉我一套循序渐进的方法，保证可以达到目标。但我缺少了可以代替老师的详细准确指引让我走上那条路，或至少指引部份的旅程。然而，就算是有如此的指引，这样就足够了吗？指引最多只能使人有所准备，来接受某些甚至连最好的方法也无法提供的事物，因此，是否任何人类所知的方法都无法造成神秘的经验？不管我如何看这个问题，我都发现自己碰上了锁住的门，但是我无法克制自己不停地去敲动门环。我的渴望不止息，而当渴望困倦时，又会渴望著渴望的心。\n因此，当有人询问我（此时我已经成为一个大学的讲师）想不想去东京大学教哲学时，我极愉快地答应这个让我能够认识日本与其人民的机会，而且又有让我接触佛教，由内学习玄学的希望。我已经听说过，在日本有一种被严密保护的生活传统：禅。这项艺术的传授经过了许多世纪的考验；而且最重要的，禅的老师都非常通晓心灵引导的奥妙。\n我才刚开始熟悉这个新环境，就设法去实现我的愿望，我立刻碰上了难堪的闭门羹。有人告诉我，从来没有任何欧洲人认真地与禅发生关系，由于禅反对任何「教导」的痕迹，我不可期望它能带来任何「理论」上的满足。我费了许多时间才让他们理解我为何希望献身于不重理论的禅。然后他们又告诉我，欧洲人想深入这种精神生活的领域是没有什么希望的─这可算是东方最玄奥的生活方式─除非他能先学习一项与禅有关的日本艺术。\n必须先上某种预备学校的想法并未令我却步。只要有希望能稍微接近禅，不管多么费事我都愿意。一条迂回的路不管有多吃力，也比没有路要好。但是在符合这项目标的众多艺术中，我要选择哪一项呢？我的妻子只稍加犹疑，便选择了花道与绘画，而我觉得射箭对我较适合，因为我假设我在步枪与手枪射击上的经验会对我有利，后来我才知道这个假设是完全错误的。\n我的一位同事，法学教授宗藏小町屋（Sozo Komachiya）,学习箭术有二十年之久，被视为校中最有造诣的代表。我拜托他介绍我给他先前的师父，有名的键藏粟（Kenzo Awa）门下做学生。师父起先拒绝我的请求，说他以前有教导过一个外国人的错误经验，至今仍然感到后悔。他不准备重蹈覆辙，以免学生被这项艺术的特殊精神负担所伤害。我坚持师父可以把我当成一个最小的弟子看待。他明白我希望学习这项艺术不是为了乐趣，而是为了「大道」，他才接受我这个徒弟，也收了我妻子，因为在日本，女子学习射箭是由来已久的传统，师父的妻子与两位女儿都是个中高手。\n就这样我开始了一段漫长而艰辛的学习。我的朋友小町屋先生，曾经不遗馀力地为我恳求，几乎成了我们的保证人，现在又成为我们的翻译。同时我也幸运地被邀请参加我妻子的花道与绘画课程，使我可以比较这些相辅相成的艺术，得到更广阔的理解基础。\n3心灵拉弓 我们从第一堂课开始，就知道这「无艺之艺」是不容易学习的。师父首先给我们看各种的日本弓，解释说它们特别的弹性是由于结构与材质所造成的，它们都是由竹子制作的。但是他似乎要我们更注意的是，长逾六尺的弓在拉开时的高贵型态，而且弦拉的越开，弓的型态就越惊人。师父解释说，当弓完全拉开时，它就包括了「一切」，因此学习正确的拉弓是很重要的。然后他抓起他最好与最强的一张弓，以一种肃穆庄严的姿势站著，轻弹了几次弓弦，发出了尖锐的扣弦声与低沉的响，这声音只要听过几次就会毕生难忘；它是如此的奇异，如此锐利地直触人心。从古以来便传说弓具有降服邪魔的秘密力量，我相信这个说法已经深植于整个日本民族的心中。经过这个深具意义，象徵净化与圣洁的初步介绍后，师父命令我们仔细看著他。他把一枝箭扣在弦上，把弓拉得如此之满，我真怕那张弓会受不了「包括一切」的紧张而把箭射出去。这一切看来不仅非常美丽，而且毫不费力。这时他指示我们：「现在你们也这样子做，但是记住，箭术不是用来锻炼肌肉的。拉弓时不要用上全身的力气，而要学习只让两手用力，肩膀与手臂的肌肉是放松的，彷佛它们只是旁观者似的。只有当你们做到了这一点，才算是完成了初步的条件，使拉弓与放箭『心灵化』。」说完这些话后，他抓住我的手，慢慢引导我做一遍将来要做的动作，好像是要我习惯这种感觉。\n即使我用一张中等的弓做第一次的尝试，我已注意到必须用相当大的力量才能拉开它。这是因为日本的弓不同于欧洲运动用的弓，它不是举在肩膀的高度，让你的身体可以施力。日本弓扣上箭时，双手必须几乎高举过头，而且双手臂几乎平伸。因此，他所能做的只是平均地向左右拉开双臂，弓拉得越开，双手也越向下移，直到握弓的左手到达了眼睛的高度，手臂伸直，而拉弦的右手臂弯曲，略高过右肩，使三尺长的箭只有一点尖端突出于弓的边缘─形成非常大的弓幅。射手必须保持这种姿势一会儿才放箭。这种特殊的拉弓方法使我的手很快就开始发抖，呼吸也变得沈重。接下来的几个礼拜，情况没有好转。拉弓仍然是件困难的事，不管如何勤奋的练习也无法使之「心灵化」。为了安慰自己，我想其中必有诀窍，师父为了某种理由没有透露，我立志要找出这个诀窍。\n我有决心地继续练习。师父注意著我的努力，沉默地纠正我的紧张姿势，夸奖我的热忱，责备我的浪费力气，此外一切随我自主。只是，当我拉弓时，他总是会对我大叫：「放松！放松！」─这是他特别学会的外国字─虽然他从来不会失去耐心或礼貌，但是他的呼喊总是触到了我的痛处。终于有一天，我失去了耐心，自己向他承认，我实在无法照他教导的方式拉弓。\n「你做不到，」师父解释说，「是因为你的呼吸不正确。吸气之后要轻轻地把气向下压，让腹肌紧绷，忍住气一会儿，然后再尽量缓慢平均地吐气，停顿一会儿，再快吸一口气─就这样不停地吸进呼出，自然形成一种韵律。如果能正确做到，你会觉得射箭一天比一天容易。因为从这种呼吸中，你不但能发现一切精神力量的泉源，也会使这泉源更为丰盛流畅地注入你的四肢，使你更轻松。」为了证明他的话，他拉开他的强弓，请我站在他后面感觉他手臂的肌肉。真的是很轻松，好像完全没有用力似的。\n我开始练习新的呼吸方法，起先不用弓箭，直到呼吸得很自然为止。在开始时有些许不适感，但是很快就被克服了。师父很强调吐气时要尽量缓慢平稳，直到完全呼出。为了练习时有更好的控制，他要我们呼气时发出声音。只有当声音完全随气息消逝之后，他才让我们再吸气。有一次师父说，吸气是融合与连接；屏住呼吸使一切进入情况；而呼气是放松与完满，克服一切限制。但是我们当时都不懂这话的意义。\n师父接著继续说明呼吸与射箭的关系。呼吸练习不只是为了呼吸而已。他把拉弓放箭的连续过程分解为几个步骤：握弓，搭箭，举弓，拉弓并停留在最大张力状态，然后放箭。每个步骤都开始于吸气，然后将气屏在腹部，最后呼出。结果是呼吸自然地配合，不仅强调了个别的位置与手的动作，而且依照个人呼吸的不同，将一切动作编织成有韵律的过程。虽然分为这些步骤，整个过程却像个完整的生物似的，一点也不像西方的体操运动，可以增减动作，也不会破坏其意义与特色。\n每当我回想那段日子，就不免会想起在开始时，我要使呼吸正确是多么的困难。虽然我的呼吸在技术上是正确的，但是每当我试著在拉弓时放松我的手臂与肩膀肌肉，我的腿部肌肉就变得更为僵硬，彷佛我若是不站稳，就会死掉似的；又彷佛我是希腊神话中的安特厄斯（Antaeus），必须从大地中吸取力量。师父时常没有办法，只好像闪电般抓住我的腿部肌肉，压住一个敏感的部位来提醒我。我为了替自己辩护，有一次对师父说，我有刻意要使自己放轻松，他回答，「这正是问题所在，你特别费心去思索它。你必须完全专注于你的呼吸上，好像除呼吸外没有其他事！」我花了许多时间才做到师父的期望。但我毕竟做到了。我学会在呼吸中毫不费力地放开自己，有时我觉得我并不在呼吸，而是─听起来很奇怪─被呼吸了。有时候我长时间地思索，不愿意承认这个大胆的念头，但是我已不再怀疑呼吸具有老师所说的一切特性。我开始偶尔能够维持拉开弓的姿势，同时保持身体完全的放松；然后次数渐渐增多，但我无法说明这是怎么发生的。少数的成功与无数次的失败之间显著的差异，使我不得不相信，我终于理解了用「心灵」拉弓的含意。\n原来如此：它不是我所妄想偷学的技巧诀窍，而是能带来解脱的呼吸控制，具有新鲜与深远的可能性。我这么说不无疑虑，因为我知道向一种有力的影响低头是多么地容易，只因为这经验是很不寻常的，就沉醉于自我幻想，过度夸大它的重要性。但是不管我是多么含糊笼统与含蓄谨慎，新呼吸方法使我终于能够放松肌肉，甚至拉开师父最强的弓，这是无可否认的事实。\n有一次我与小町屋先生谈到此事，我问他为什么师父看我花那么多冤枉力气去试图用「心灵」拉弓，却不在一开始就教导正确的呼吸方式。「一个伟大的师父，」他回答，「必然也是一位伟大的老师。对我们来说，这两者是一体的。如果他一开始就教呼吸练习，他就无法使你信服这种方法的决定性重要。你必须以自己的努力去遭受挫败，你才会准备好抓住他抛给你的救生圈。相信我，从我自己的经验中，我知道师父了解你和每一个学生，比学生自己都要清楚，也许我们不愿意承认，他能够看进学生的心灵。」\n4不放箭的放箭 经过了一年，才能够做到不费力的「心灵」拉弓，这实在算不得什么了不起的成就。可是我很满意，因为我开始理解一种自卫术的道理，一个人以出乎意料之外的退让使对手的强烈攻击落空，因而倒地，这种以对手本身的力量来击败对手的艺术叫做「柔道」。自古以来，致极柔软而又无可征服的水，就是柔道的象徵。老子曾经说过「上善若水」的至理名言。因为「天下莫柔弱于水，而攻坚强者莫之能胜。」而且，师父在学校常说，「开始时进步得很快的人，以后会遭遇较多的困难。」对我而言，开始绝非易事，因此我是否可以觉得有信心去面对将来的困难呢？\n接下来要学的就是「放箭」。到目前为止，我们被允许偶尔放放箭，它只被当成附带的练习。至于箭射到何处没有人在意。只要它能射中那捆兼具箭靶及沙袋双重功能的稻草束时，就是很大的光荣。而要射中它实在不算什么，因为我们离它最多只有十步远。\n以往，当我维持不住弓的最高张力，伸展的双臂必须收回时，我就会放开弓弦。弓的张力倒是一点也不令人感到痛苦。拉弦的皮手套在拇指处有很厚的衬，以防弦的压力使拇指受不了而在弦未到最高张力时便提前放了箭。拉弓时，拇指绕著弦，贴著箭，扣进掌心。三个手指紧紧压住拇指，同时稳稳地夹住箭。放箭就是张开握住拇指的手指，把拇指放掉。因为弦的拉力极大，拇指会被猛力拉直，弓弦一抖，箭便飞了出去。到目前为止，我放箭时身体都猛然颤抖一下，影响了弓与箭的稳定。因此根本无法做到平稳的放箭，不用说，有些箭是一定是射得「歪七扭八」。\n一天师父看到我放松拉弓的姿势没有什么问题后，就对我说，「到目前为止你所学的，只是放箭的准备工作。我们现在面对一项新的，而且特别困难的任务，这将带领我们进入箭术的新阶段。」说著，师父抓起他的弓，拉满了就射出去。在这时候，我特别地注意师父的动作，才发现师父的右手虽然因为张力的释放而向后弹回，但是却完全没有震动到身体。他的右手在放箭前是成一个锐角，放箭后被弹开来，却轻柔地向后伸直。无法避免的震动完全被缓冲所吸收抵销了。\n如果不是那颤抖弓弦尖锐的「绷」地一声，以及飞箭的穿透力，没有人会感觉到那放箭时的威力。至少在师父身上，放箭看来如此轻松平常，简直就像儿戏。\n毫不费力地进行一项需要极大力量的表演，这是一种奇观，东方人能深加体会与欣赏。但是对我而言更重要的是─当时我无法另做他想─射箭的正确与否是决定于放箭的平稳。我从步枪射击得知，瞄准时若有轻轻的晃动会造成多么大的影响。我到目前所学的一切，只能从这个观点来看对我才有意义：轻松地拉弓，轻松地维持著最高张力，轻松地放箭，轻松地缓冲反弹力─这一切都是为了击中箭靶的伟大目的，我们难道不是为了这个目的才花费这么大工夫与耐性学习箭术？那么，为什么师父会说，我们到目前为止所练习与所习惯的一切中，过程才是最重要的呢？\n不管如何，我仍然依照师父的指导勤练不懈，但是我的努力都白费了。我时常觉得我以前不加思索地胡乱放箭，反而射得比较好。我特别注意到，我无法轻松地放开右手，尤其是扣住拇指的三个手指总是必须用上一点力。结果造成放箭时的震动，于是箭就射歪了。尤有甚者，我无法缓冲放箭后的突然松开的右手。师父继续不气馁地示范正确的放箭；我也不气馁地模仿他─唯一的结果是，我越来越没有把握，彷佛像支蜈蚣突然想弄清楚自己的脚走路的顺序，结果反而无法移动分寸了。\n师父对于我的失败显然不像我这样恐慌。他是不是从经验中知道了一定会如此？「不要思索你该怎么做，不要考虑如何完成它！」他叫道，「只有当射手自己都猝不及防时，箭才会射得平稳。弓弦要彷佛切穿了拇指似的。你绝不能刻意去松开右手。」\n接下来数月的徒劳练习。我一直以师父为参考，亲眼观察正确的放箭，但是我一次都没有成功。我拉弓后苦苦等待著放箭的发生，结果就会受不住张力，双手慢慢被拉靠近，这一箭就泡汤了。如果我坚持忍受张力，直到气喘吁吁，我就必须依赖手臂与肩膀的肌肉。于是我像座石像般站在那里─模仿师父的不动─但是全身　硬，我的松弛也就消失了。\n也许是碰巧，也许是师父有意的安排，有一天我们在一起喝茶。我抓住这个讨论的机会好好吐露一番心声。\n「我很了解，」我说，「要把箭射好，放箭时绝不能震动。但是我怎么做都不对。如果我尽可能握紧手指，则松开手指时就无法不震动。但是相反的，如果我轻松地拉弓，则还没有达到张力顶点，弓弦就会从手中扯脱，固然是猝不及防，但仍然太早了些。我被困在这两种失败中，找不出方法逃避。」\n师父回答说，「你握住拉开的弓弦，必须像一个婴儿握住伸到面前的手指。他那小拳头的力量让人惊讶，而当他放开手指时又没有丝毫的震动。你知道为什么吗？因为婴儿不会想：我现在要放开手指来抓其他东西。他从一件东西转到另一件东西，完全不自觉，没有目的。我们说婴儿在玩东西，而我们也可以说，是东西在跟婴儿玩。」\n「也许我懂得你这个比喻的意思，」我表示，「但是我是不是处于完全不同的情况中呢？当我拉弓时，到了某个时刻我就会感觉：除非立刻放箭，否则我就忍耐不住张力。于是呢？我就会开始喘气不已。所以不管我愿不愿意，我都必须放了箭，因为我无法再等下去了。」\n「你把困难形容的再恰当也不过了，」师父回答说，「你知道你为何无法等待下去？为何在放箭之前会喘气？正确的放箭始终未发生，因为你不肯放开你自己。你没有等待完成，却准备迎接失败。只要这种情况继续下去，你就别无选择，只能靠自己来召唤一些应该自然发生的事，而只要你继续这样召唤下去，你的手就无法像婴儿的手一样正确地放开，就无法像一颗熟透的水果般自然绽开果皮。」\n我不得不向师父承认，这个解释使我更为迷惑了。我说，「我拉弓放箭的最终目的是为了击中箭靶。拉弓只是达到目标的一种手段，我无法不顾这种关系。婴儿对此毫无所知，但是对我而言，这两件事是不可分的。」\n「真正的艺术，」师父叫道，「是无所求的，没有箭靶！你越是顽固地要学会射箭击中目标，你就越无法成功，目标也离你越来越远。阻碍了你的，是你用心太切。你认为如果你不自己去做，事情就不会发生。」\n「可是你自己都时常告诉我，箭术不是一种消遣，不是无意义的游戏，而是生死大事！」\n「我还是这么主张。我们箭术师父都说：一击一生命！这句话的意义你现在还无法理解。但是用另一种说法来描述同样的经验，可能对你会有所帮助。我们箭术师父说：射手以弓的上端贯穿天际，弓的下端以弦悬吊大地。放箭时如果有一丝震动，便会有弓弦断裂的危险。对于有心机与暴躁的人而言，这种断裂便是永久的，他们便陷入上不及天，下不著地的可怕境地。」\n「那么，我该怎么做呢？」我沉思地问。\n「你必须学习正确地等待。」\n「怎么学习呢？」\n「放开你自己，把你自己和你的一切都断然地抛弃，直到一无所有，只剩下一种不刻意的张力。」\n「所以我必须刻意地，去成为不刻意的？」我听见自己这么问。\n「没有一个学生这样问过我，所以我不知道怎么回答。」\n「我们什么时候开始新的练习？」\n「时候到了就知道。」\n5以心传心 这是从我开始上课以来，与师父第一次亲密的谈话，却使我感到极度的迷惑。现在，我们终于谈到我学习射箭的主要原因了。师父所讲的放开自己，不就是到「空无」与「超然」途中的一个阶段吗？难道我还无法感觉到禅对箭术所产生的影响吗？到目前为止，我实在无法体会无所求的等待与适时达成的弓箭张力两者之间的关系。但是，只能从经验中才能学会的东西，又何必用思想去预测呢？现在是不是该抛弃这种无结果的习惯吗？我时常私下羡慕师父的那些学生们，像小孩一样让他牵著他们的手教导他们。这样毫无保留是多么愉快啊！这种态度不见得会造成淡漠与心灵的停滞。小孩至少会发问吧？\n再度上课的时候，令我失望的是，师父仍然继续以前的练习：拉弓，等待，放箭。但是他的一切鼓励都没有用。虽然我遵照师父的指示，不向弓的张力屈服，努力挣扎，彷佛弓弦可以一直拉下去似的；虽然我努力等待张力自己将箭射出去，但是每一箭都还是失败了；摇晃，歪斜，抖动。我被一种预期的失败所压迫著，使练习不但毫无要领，而且更具有危险性。只有到那时候，师父才中断了练习，开始新的指导方向。\n「你们以后来上课的时候，」他告诫我们，「你们必须在路上就开始收心。把你的心神集中于练习厅中所发生的事。视若无睹地经过其他一切，彷佛这个世界上只有一件事是重要而且真实的，那就是射箭！」\n放开自己的过程也被分为几个步骤，必须仔细地练习。师父在这里也只做了简略的指示。对于这些练习，学生只要理解（有时候只要用猜的）他们必须做到的是什么就够了。由于这些不同步骤之间的区分在传统上只是存在于意象中，因此不需要加以概念化。谁知道，这些经过数世纪练习所产生的意象，也许要比我们所有仔细规画出来的知识都还要深入呢？\n我们已经踏出了这条途径上的第一步。那就是身体的松弛，如果没有身体的松弛，弓弦就无法正确地拉开。如果要正确地放箭，身体的松弛必须要继续成为心理与精神上的松弛，使心灵不但敏捷，而且自由；因为自由所以才敏捷；因为原本敏捷，所以才自由；这种原本的敏捷与一般所谓的心思灵敏有根本的不同。因此，在这两种状态─身体的松弛与心灵的自由之间，有一种差别是无法单独以呼吸练习来克服的，而是必须从放弃一切执著开始，成为完全的无我；于是心灵会回返内在，进入那无名无状，无穷无尽的原本之中。\n关闭所有感官之门，这项要求并不意味著主动拒绝感官的世界，而是准备好顺其自然的退让。要能够自然地完成这种无为的行为，心灵需要有一种内在的定力，这种定力就要靠呼吸的专注来达成。这是刻意的练习，而且要刻意到装模作样的程度。吸气与吐气都要极仔细地一再练习。不需很久就会有效果。一个人越是专注于呼吸，外界的刺激就越来越模糊。刚开始时，它们就像是掩耳听到的含混叫声，渐渐消失，最后就像远方的海涛声般令人习惯，不加觉察了。时日久后，对更大的刺激都会产生抗力，摆脱它们也变得更快更容易。只需要注意身体不论行住坐卧都是放松的，专注于呼吸上，不久便会感觉自己被一层无可渗透的寂静所包围。只意识与感觉自己在呼吸。然后渐渐脱离这种意识与感觉，不需要做什么新的决定，因为呼吸自己会缓慢下来，变得越来越节约，最后逐渐变成一种模糊的调子，完全脱离注意力的范围。\n不幸的是，这种微妙的忘我境界并不持久。它终会受到来自于内在的干扰。彷佛无中生有，各种的情绪，感觉，欲望，担忧，甚至思想都会产生，一团无意义的混乱，而且越是荒唐与无来由，就越难以摆脱。它们彷佛是要向意识复仇，因为意识专注于呼吸，闯入了原来不可到达的领域。唯一能使这种干扰停止的方法就是继续呼吸，平静而漠不关心地，与任何出现的事物建立友好的关系，熟悉它们，平等地看待它们，最后看待到倦怠时，就会进入一种睡著之前的朦胧状态。\n但是如果后来就这样睡著了，则是必须加以避免的危险。避免的方法就是要突然提升注意力，就像一个彻夜未眠的人，当他知道自己的生命要依靠他的警觉时，精神上突然的一震；这种提升只要成功一次，以后必然可以重复。它能帮助心灵产生一种内在的震动─－种安宁的脉动，可以升华为一种通常只有在稀有的梦境中才能经验到的轻快感觉，及一种陶然的确信，相信自己能够从四面八方得到能量，恰到好处地加强或减轻精神上的压力。\n在这种状态中，没有一件事需要思考，计划，奋斗，欲求或期待，没有特定方向的目标，但是知道自己的可能与不可能，其力量是如此的不可动摇─这种状态是根本的无所求与无自我，就是师父所谓的真正「心灵化」。事实上它充满了心灵的觉察，所以又被称为「当下的真心」。意味著心灵与精神存在于一切，因为它不会执著于任何固定地点。它可以保持当下的存在，因为当它与不同事物有关联时，也不会依附于反映上，因而失去其原本的灵敏。像池塘里满盈的水，随时准备漫溢出来，有无穷的力量，因为它是自由的；它对一切事物都开放，因为它是空无的。这种境界是一种原始的境界，它的象徵是一个虚空的圆圈，但是对于站在里面的人而言，并不是毫无意义的。\n艺术家摆脱一切执著进行创作，是为了实现这种当下的真心，不被任何外在动机所干扰。但是如果他想要忘我地沈浸于创作过程中，就必须先整顿艺术的道路。因为，在他的自我沉浸中，他会面临无法自然超越的情况，他就必须回到意识状态中。于是他就与他已经脱离的一切关系再度发生联系；他只能像个早上醒来的人考虑一天的计划，而不是一个得到开悟的人在本然状态中生存与行动。他永远无法觉察他的创作过程是由一种更高的力量所控制；他也永远无法体会当他自己是一种震动时，一切事物所传达来的震动是多么地令人陶醉；他所进行的一切，在他还不知道之前便已经完成了。\n因此，必要的超然与自我解脱，内省与生命的强化，当下真心的出现，这些状态不是靠机会或理想的环境才能达成，越是想要达到这些状态，就越不能听天由命，尤其不能放任于艺术创造，认为理想的专注会自己产生。艺术创造本身已经占据了艺术家的所有力量。在一切作为与创造之前，在他开始献身于他的任务之前，艺术家先召唤当下的真心，透过练习加以把握住。他开始成功地抓住真心，不仅只是偶然的片刻，而是可以随时把握，于是这种专注就像呼吸一样和箭术连结在一起。为了能顺利进入拉弓放箭的过程，射手跪在一旁开始专注，然后站起来，仪式化地走向箭靶，深深向它顶礼，像供奉祭品般呈上弓与箭，然后搭上箭，举起弓，拉满弓弦，以极为警觉的心灵等候著。当箭与弓的张力如闪电般发射之后，射手仍然保持著放箭后的姿势，缓缓地呼出气后，再深深吸一口气。这时候他才放下手臂，向箭靶一鞠躬，如果他不再射击，就静静地退到后面。\n就这样，箭术成为一种仪式，表现了「大道」。\n即使学生到现在仍未抓住射箭的真实意义，他至少理解箭术为什么不是一项运动或身体锻炼了。他理解了为什么箭术可学习的技术部份必须练习到滚瓜烂熟的地步。如果一切都决定于射手的无所求与无我，那么它的出现必须自动地发生，不需要理智的控制与反应了。\n日本式的教导，正是采取这种形式。练习又练习，重复再重复，越来越强烈，这是漫长学习过程中的主要特色。至少在一切传统的艺术中是如此。示范，举例；直觉，模仿─这是师生间的基本关系。虽然在近几十年来引进了新的教育方法，欧洲式的教导已经得到认可与推广，但是尽管新事物的新鲜刺激，这些教育改革并未影响到日本艺术，这是为什么呢？\n这个问题不容易找到答案。但是仍然必须一试，即使只是很粗略的答案，也可以让教导的形式与模仿的意义更为清楚些。\n日本学生都具有三项特质：良好的教育，对所选艺术的热爱，及对老师的敬爱。自古以来，师生关系就是一种基本的生命义务，在老师身上，必须具有一种远超过职业要求的高度责任感。\n开始时，老师对学生没有什么要求，只要他能刻意地模仿老师向他示范的。老师避免长篇大论的说教与解释，只会偶尔地给予指示，也不期待学生发问。他无动于衷地观看著学生笨拙的努力，一点也不指望看到独立与自主，只是耐心地等待成长与成熟。双方都有的是时间；老师不会催逼，学生也不会负担过重。\n老师绝不会想过早使学生成为艺术家，他的首要考量是使学生成为一个技巧纯熟的工匠，对自己的手艺有完全的控制。学生勤勉地贯彻老师的想法，彷佛自己没有更高的抱负，他近乎愚钝地在责任下低头努力，只有经过了若干年，才发现他所熟练的技巧已经不再具有压迫性，反而使他得到解脱。他一天比一天更能追求他的灵感，不需要在技术上费力；同时他也能透过细心的观察而启发灵感。他心中刚浮现的意象，手中的笔已将那意象捕捉描绘下来，最后学生自已都不知道，究竟是心还是手完成了这项创作。\n但是，要达到这种「心灵化」的地步，　要一种身体与心灵力量的完全集中，如同箭术的要求，在以下的例子也可看出，这种身心的集中在任何情况下都是不可或缺的。\n一个画家坐在他的学生面前。他检查他的毛笔，慢慢地整理妥当，仔细地磨墨，展开面前席子上的长宣纸，最后他凝神专注地坐在那里一会儿，凛然不可侵犯，然后他以快速而确实的笔触，挥毫画出不容修改也不需修改的完美图画，作为班上的范本。\n一位花道师父上课时，他先仔细地解开捆扎花枝的纤维，卷起来放在一边。然后他一一地检查花枝，一再审视后，选出其中最好的，小心地弯曲成适当的型态，最后把它们一起放进一只优雅的瓶子里。完成后的景象就彷佛是花道师父偷窥了大自然秘密的梦境。\n限于篇幅，我只能就以上的两个例子来讨论。在两个例子中，师父们的行为都是旁若无人的。他们几乎不看学生一眼，更不说一个字。他们在进行准备时，神情专注自若，他们让自己沉浸于创造的过程中，对于学生及他们自己来说，从开始到完成，创作是完整自足的一件事。的确，这整件事是如此的有力量，旁观者像是在欣赏一幅画。\n虽然这些准备工作是必要的，但是老师为什么不让有经验的学生来做呢？他自己磨墨，细心解开绑花的纤维，而不是剪开来随手丢掉，是不是这样可以增进他的想像力与创造力呢？是什么力量驱使他在每一堂课都重复如此的步骤，而且坚持他的学生毫无变动地如法炮制呢？他固执遵守这些传统的习惯，因为他从经验中知道，这些准备工作同时能使他进入适于创作的心灵状态。他在工作时的专注沉思带给他必要的松弛与稳定，来发挥他的所有力量，达到当下的真心，若不如此，没有任何创作能够完成。无所求地沉浸于他的创作中，艺术家直接面对了浮现在眼前的完美图像，它彷佛自己就完成了。就像箭术仪式中的脚步与姿势，其他艺术的准备工作形式不同，但意义是一样的。只有在无法事先预备的情况下，如宗教仪式的舞蹈者与演员，自我专注与自我沉浸要在上台前便开始进行。\n正如箭术，这些艺术无疑都是仪式。它们能比老师的言语更清楚地让学生明白，只有当准备与创造，技巧性与艺术性，物质与心灵，计画与目标都融合无间时，才能进入正确的艺术家精神状态。学生在这里发现一个新的模仿课题。现在他必须练习不同的专注与忘我的方法。他所模仿的不再是任何人只要愿意都可以抄袭的事物皮毛，而是更自由，灵活，心灵化的模仿。学生自觉面临新的可能性，但同时也发现这些可能性的实现与他自己的意志完全无关。\n假设学生的才能可以胜任日益增加的压力，在他达到成熟之前仍然有一种几乎难以避免的危险。这种危险不在于他消耗自己于无益的自满中─东方人没有此类的自我崇拜─而是会停滞于故步自封，因为他的成就得到认同，他的名声大噪；换句话说，他会使艺术性的生活成为一种自说自话式的生存方式。\n老师会预见这项危险。他像引领心灵往生的向导一样，小心地转移学生方向，使学生超然于自我。他轻描淡写地指出─彷佛学生已经知道，不值一提的—— 一切事情只有在真正无我的状态中才做得好，做事的人不再是他自己，只有一种精神是存在的，一种没有自我痕迹的意识，因此涵盖了极远与极深，没有止境，能够「以眼听音，以耳视物」。\n老师就这样让他的学生穿越了自我。学生的感受力日增，也让老师带引他去见识到以往只能耳闻的事物，这些事物现在开始成为他自己的经验基础。老师称呼它什么都不重要，也许根本不提。即使老师保持沈默，学生也能理解他的意思。\n重要的是，从此一种内在的变化开始发生作用。老师追求它，但不会以更进一步的指导来扰乱它的发生，他以他所知道最隐密与亲密的方式来帮助学生：也就是佛家的直接心传。「以一根蜡烛点燃另一根蜡烛」，于是老师将正确的艺术精神以心传心，使学生大放光明。如果学生有幸承蒙教诲，他就会记得，不论外在的表现是多么吸引人，最重要的还是内在的改变。如果他想要完成艺术家的使命，就必须要完成这一点。\n这种内在的变化，是把一个人的自我以及他时时觉察到的自知，改变为一种可训练与塑造的素材，最终的目标是艺术的成熟。在此过程中，艺术家与个人在某种较高的层次中结合。因为只有当艺术能够以无限的真理为其依据，成为最本然的艺术时，艺术才能成为一种生活方式。艺术家不再寻求，而只会发现。以艺术家而言，他是个超凡入圣的人；以人而言，他是个具有佛性的艺术家；无论在他的做与不做，工作与等待，存在与不存在，心中都有佛眼。人、艺术、作品，三者合而为一。这种内在的艺术，不会像外在的艺术那样离艺术家而去；艺术家不「创作」它，艺术家只能「存在」，让它发自于世人一无所知的深处。\n到达艺术成熟的路是陡峭的。通常除了学生对老师的信心之外，没有任何事能促使学生继续走下去。学生此时能够理解老师的精通。他是内在艺术活生生的例子，他的存在便足以使学生信服。\n学生能够前进到什么地步，这不是老师所关切的。当他才刚为学生指点正确的途径后，他就必须要让学生独自前进了。他只能再帮助学生一个忙，使学生能忍受孤独之苦；他帮助学生离开自我，也离开自己的老师，他勉励学生要走得比他自己还远，要「爬到老师的肩上」。\n不管学生的路前往什么方向，也许他再也看不到老师，但他永远忘不了老师。他对老师的感恩不下于他初学时毫无保留的敬爱，强烈有如他对艺术的信仰；以如此的心境，他取代了老师的位置，准备做任何牺牲。直到最近的历史，都有无数的例子可以证明，这种感恩之情远超过人类中的一切常情。\n6箭术的大道 一天一天地，我发现自己越来越能够熟练地进行箭术「大道」的定式，做起来毫不费力，或说得更明白，我感觉自己彷佛是在梦中完成了一切。到目前为止，师父的预测都被证实了。但是我仍然无法防止我的注意力在射击的那一刹那涣散。在弓弦最高张力点的等待不仅极为疲劳，使张力松弛，而且也非常难受，我常会由自我沈浸中被扯出来，不得不刻意地放箭。\n「不要去想那一箭！」师父叫道，「这样一定会失败的。」\n「我无法不想，」我回答，「这张力实在太痛苦了。」\n「你会感觉痛苦，因为你没有真正放开自己。一切都非常简单。你可以从一张普通的竹叶子学到应该发生的情况。叶子被雪的重量越压越低。突然间雪滑落地上，叶子却一动也不动。就像那叶子，保持在张力的最高点，直到那一击从你身上滑落。的确如此，当张力完成后，那一击『必然』滑落，它从射手身上滑落，就像雪从竹叶滑落，射手甚至连想都来不及。」\n尽管我尝试了一切该做的或不该做的，我仍然无法等待到那一击的「滑落」。就像以前一样，我不得不刻意放箭。这一再的失败使我愈加沮丧，因为我已经学习了三年。我不能否认我曾经花了许多时间忧愁，思考我是否应该这样浪费光阴，我的作法似乎与我到目前为止所学，所经历到的一切都没有关系。我想起了我的一位同乡的讥讽，他说在日本除了这种无用的艺术之外，还有许多别的事物可以选择。他问我学成之后打算用来做什么，当时我对他的话并不在意，现在看来，也不尽然是无的放矢。\n师父一定是觉察了我心中的念头。后来小町屋先生告诉我，师父曾经尝试研读一本日文的哲学入门书，想用我所熟悉的学问来帮助我。但是最后他板著脸放下了书，说他现在可以理解，对这种东西有兴趣的人，自然会觉得箭术是万分难学的了。\n我与我妻子在海边度过暑假，置身于宁静孤独，优美如梦的环境。我们的行李中，最重要的就是我们的弓箭。日复一日，我专注于放箭。这变成了一种「偏执」，使我越来越不记得师父的警告：我们只应该练习自我超然，其他都不要练。我反覆思索了各种可能后，得到一个结论，我的错误并不是如师父所说的无法做到无所求与无我，而是因为我的右手手指把大拇指压得太紧了。我越是等待射击的发生，就越不自觉地压得越紧。我告诉自己，要在这个地方下功夫才对。不久，我就发现了一个简单而明显的解决办法。在拉弓之后，我小心地减轻手指在拇指上的压力，于是时候到了，拇指就会扣不住弓弦，彷佛自然地被拉开，如此就会产生闪电般的放箭，箭就像「竹叶上的雪」一样滑落。我觉得这项发现很可信，因为它与步枪射击的技巧有相似之处。在扣扳机时，食指慢慢的弯曲，直到一种很小的压力克服了扳机的最后阻力。\n我很快便相信自己一定走对了方向。几乎每一箭都射的平稳，而且在我看来，是毫不刻意地出人意外。当然我没有忽略这项胜利的另一面：右手的微妙控制　要我完全的注意力。但我安慰自己，希望这项技巧会逐渐成为习惯，不再需要特别的注意，终于会有一天，我能忘我与不自觉地在张力最高点放箭，如此这项技巧便会心灵化。我的这个信念越来越强烈，我不理会内心的抗议，也不顾妻子反对的忠言，继续练习下去，十分满意我终于向前迈进了一大步。\n再度开始上课后，我射出的第一箭，在我看来是辉煌的成功。射的极为平顺与出人意料之外。师父看了我一会儿，好像不相信他的眼睛，然后犹疑地说，「请再射一次！」我的第二箭似乎比第一箭还要好。师父不发一言走上前，从我手中接过弓，回去坐到一个垫子上，背对著我。我知道这个姿势的意思，便告退下去。\n第二天，小町屋先生告诉我，师父不愿意继续教我了，因为我想要欺骗他。我非常惊慌自己的行为被这样误解，急忙向小町屋先生解释，为了避免一辈子停滞不前，我才想出了这个放箭的方法。他为我说情之后，师父才终于让步继续授课，但是有一个条件，我必须答应永远不再违背「大道」的精神。\n就算我没有羞愧致死，师父的风度也让我下决心要改过。他对此事一字不提，只是平静地说，「你可以看出在最高张力的状态下，若是做不到无所求的等待会有什么后果。难道你非得不停问自己是否能够控制吗？耐心地等待，看看会发生什么─以及它是如何发生的！」\n我对师父指出，我已经进入了第四个年头，而我在日本停留的时间是有限的。\n「到达目标的途径是不可衡量的！几星期，几月，几年，又有什么重要呢？」\n「但是我如果半途而废呢？」我问。\n「一旦你真正成为无我时，你可以在任何时候中断。努力练习这个吧！」\n于是我们又重新开始，彷佛以往我所学的一切都没有用。在张力最高点的等待还是像以前一样失败，我似乎不可能跳脱我的困境了。\n一天我问师父，「如果『我』不去放箭，箭怎么会射出去呢？」\n「是『它』射的。」他回答。\n「我听你这样说过好几次，让我换个方式问：如果『我』已不存在了，我又如何忘我地等待那一射呢？」\n「『它』会在张力最高点等待。」\n「这个『它』是谁呢？是什么东西呢？」\n「一旦你明白了这个，你就不需要我了。如果我不让你亲身体验，而直接给你线索，我就是最坏的老师，应该被开除！所以我们不要再谈这些，继续练习吧。」\n几个星期过去了，我没有任何进展。但我发觉这并不使我烦恼。难道我对这整件事都厌倦了？我有没有学成这项艺术，有没有体验到师父所谓的「它」，有没有找到禅道─这一切都似乎变得非常遥远，非常无关紧要，不再困扰我。好几次我决定要向师父坦白这种情况，但是当我站在他面前时，我就失去了勇气；我相信我只会听到千篇一律的回答：「不要问，继续练习！」所以我停止发问，要不是师父严格地监督我，我也想停止练习。我只是一天过了算一天，尽好自己的教书责任，到最后也不再抱怨自己浪费了这些年的时间。\n然后，有一天，射出了一箭之后，师父深深地鞠了一个躬，中断了练习。「刚才『它』射了！」他叫道，我惊讶地瞪著他。等到我终于理解了他的意思，我也禁不住为之雀跃。\n「我的话不是赞美，」师父严厉地告诉我，「那只是一句不该影响到你的话。我也不是对你鞠躬，因为那一箭完全与你无关。这次在张力最高点时，你保持著完全无我与无所求的状态，于是这一箭就像个熟透的水果般从你身上脱落。现在继续练习，彷佛什么事都没有发生。」\n经过了相当久之后，才偶尔又有几次正确的放箭，师父每次都会以鞠躬来表示。究竟箭是如何自己松弛飞去，我紧握的右手是如何突然向后扬起，当时我无法解释，现在仍然无法解释。但是事实不会改变，它确实是发生了，这才是重要的。至少我已经能够自己分辨出正确的放箭与失败的放箭。两者之间的差异是如此巨大，一旦体会后便无法忽略。对于旁观者而言，外表上看来，在正确的放箭时，右手向后的弹起会有缓冲，不会震动到身体。然而，在错误的放箭时，被压抑的呼吸会猛然吐出，下一口气便无法快速吸入。正确的放箭后，呼吸会毫不费力地完成，吸气也从容缓和。心跳均匀宁静，专注不受干扰，射手可以马上接著射第二枝箭。在精神上，正确的一击会让射手感觉一天好像才刚开始。他觉得他可以做好一切事，或者更重要的是，可以做好一切的「不做」。这种状态真是愉快极了，但是师父带著高深莫测的微笑说，拥有这种状态的人最好要像根本没有一样。只有完满地一视同仁，才能接纳这种状态，让它不会害怕再度出现。\n一天师父宣布我们要开始一些新的练习。我对他说，「好，至少我们已经过了最难的一关。」\n「行百里者半九十，」他引用成语回答，「我们的新练习是射击箭靶。」\n到目前为止，我们的靶子与挡箭设备是捆在木桩上的稻草束，离我们只有两根箭的距离。而另一方面，正式的箭靶与射手的距离大约有六十尺，立在一堵高而宽的沙堤上，沙堆靠在三面墙上，就像射手所站立的大厅，上面有曲线美丽的瓦屋顶。箭靶与射手所在的两个大厅以很高的木板墙壁相连，使这个奇妙的地方与外界相隔离。\n师父先给我们一次射靶的示范：两枝箭都射入了黑色的靶心。然后他吩咐我们像以前一样正确完成定式，不要对箭靶感到畏惧，在张力最高点等待箭的「滑落」。我们的细长竹箭朝正确的方向飞去，但是甚至没有碰到沙堤，更不用说靶子了，只落在靶前的地上。\n「你们的箭飞不远，」师父观察后说，「因为它们在心灵上的距离就不够远。你们要把箭靶当成是在无穷远处。箭术大师都有如此的共同经验：一个好射手用中等强度的弓，可以比没有心灵力量的射手用最强的弓射得还远。射箭不靠弓，而是靠当下的真心，靠射箭时的活力与意识。为了能完全发挥这种意识的力量，你们必须以不同方式进行定式：像个舞蹈家在跳舞。如果你能够如此，你的动作就会发自于中心，从正确呼吸的源头发出。不是像在脑中背诵定式般的演练，而会像当时的灵感直接创造出来的，于是舞蹈者与舞蹈就合为一体，别无二物。把定式变成宗教性的舞蹈，你的心灵意识才会发展出所有的力量。」\n我不知道我在这种定的「舞」上有多少成功，有没有从中心发出动作。我的箭已经射得够远，但是仍然无法击中箭靶。因此我问师父，为什么他从来没有说明如何瞄准。我想在箭靶与箭尖之间一定有某种关系存在，一定有某种既定的瞄准方法可以使箭击中目标。\n「当然是有，」师父回答，「你自己很容易就可以找到准头。但是如果你每次都几乎击中箭靶，你也不过是个爱卖弄技术的射手而已。对于计较得分的职业射手而言，箭靶只不过是一张被他射得粉碎的可怜纸张罢了。对于「大道」而言，这却是纯粹的邪恶。它不知道一个在多少距离之外的固定靶子。它只知道有一个目标，一个无法用技术来瞄准的目标，它把这个目标名为『佛』。」师父说这些话的神情彷佛根本不需要解释似的。他叫我们在他射箭时仔细注意他的眼睛。就像他在进行定式时一样，他的眼睛几乎是闭著的，我们一点也不觉得他有瞄准。\n我们很听话地练习射箭而不瞄准。起先我完全不在意箭落何处。即使偶尔射中箭靶，我也不会兴奋，因为我知道那只是侥幸而已。但到后来，这种盲目乱射还是使我受不了。我又陷入了担忧之中。师父假装没有注意到我的不安，直到有一天我向他承认，我已经快要受不了。\n「你的烦恼是不必要的，」师父安慰我，「要把射中目标的想法抛出脑外！就算你每箭都射不中，你仍然可以成为一个师父。射中箭靶只是外在的证明，表示你的无所求，无自我，放开自己…不管你如何称呼这种状态，已经达到了颠峰。熟练的程度也有等级之分，只有当你到达了最高的一级，才能百发百中。」\n「这正是我百思不解之处，」我回答，「我能里解你说，内在的目标才是真正要击中的。但是射手不用瞄准就可以射中外在的目标─那张圆纸─而这一击只是内在事件的外在证明─这其中的关系是我所想不透的。」\n师父想了一会后说，「如果你以为只要大概里解这些深奥的关系，就可以帮助你，那你就是在幻想。这些过程是超过理解范围的。别忘了在大自然中也有许多关系是无法理解的，但是又如此真实，我们就习以为常，彷佛是天经地义的。我给你一个我自己也经常思索的例子：蜘蛛在网中跳舞，不知道会有苍蝇飞入它的网中。苍蝇在阳光中随意飞舞，不知如何飞入网中。但是透过蜘蛛与苍蝇，『它』舞动了，于是内在与外在便在这场舞蹈中合而为一。同样的，射手不用瞄准地射中靶子─我无法再多说了。」\n虽然这个比喻没有带给我满意的结论，它占据了我的思绪。尽管如此，我的内心还是难以释怀，我无法无牵挂地练习。过了几个星期，一个较清楚的异议开始在我心中形成。于是我问师父，「是否有这个可能：你经过了多年的练习，可以如反射动作般举起弓箭，就像一个梦游者一样确实，所以，虽然你拉弓时没有刻意瞄准，你也一定会射中箭靶─因为你根本就不会射不中？」\n师父早就习惯了我这些令人疲倦的问题，他摇摇头，沈默片刻后说，「我不否认你说的不无道理。我面对箭靶，就算我不刻意朝箭靶的方向注视，也必然会看到它。然而我知道这样看是不够的，不能决定什么，也不能解释什么，因为我对那箭靶是视而不见的。」\n「那么你蒙住眼睛也应该能射中它。」我脱口而出。\n师父瞄了我一眼，使我害怕我对他失礼，然后他说，「今晚来见我。」\n师父这两箭显然也射中了我：我彷佛在一夕之间改头换面，不再对自己射的箭感到烦恼。师父为了进一步加强我的信念，在我们练习时他从来不会看箭靶，而只注视著射手，好像从射手身上便可以知道箭射当晚，我面对他坐在一个垫子上。他给了我一杯茶，但没有说话。我们这样坐了许久。四周寂静无声，只有茶壶在炉火上的沸声。最后师父站起来，示意我跟随他。练习厅里灯火通明。师父叫我把一根细长如织针的小蜡烛插在箭靶前的沙地上，但是关掉箭靶上的灯光。箭靶四周暗得看不见靶的轮廓，如果不是那支小蜡烛的细小火焰在那里，我根本无法确定箭靶的位置。师父「舞」过了定式，第一箭从耀眼的光亮中直射入黑暗。我从声音知道箭已中靶。然后第二箭也射中了。当我打开箭靶处的灯光时，大吃一惊地发现第一箭射在靶的中心，而第二箭劈开了第一箭的箭尾，穿过了箭身，插在第一箭边上。我不敢把两枝箭分别拔出，只好连箭靶一起搬回来。师父仔细地审视一番，然后说，「你会想，第一箭不算什么，因为经过了这么多年，我已经熟悉了箭靶的位置，即使在黑暗中，我也知道目标何在。或许如此，我不想否认。但是第二箭射中了第一箭─这你要怎么解释？无论如何，我知道这一箭不能归功于『我』。是『它』射了，也是『它』射中的。让我们向箭靶鞠躬，就像对佛陀鞠躬一样。」得如何。我问起他时，他坦然承认确实如此。我自己也能够一再证实，他在这方面判断的正确性，丝毫不下于他射箭的准确。就这样，经过最深沉的专注，他将艺术的精神传授给他的学生，我也不怕承认，虽然我怀疑了很久，我从我的经验中证实了直接心传的说法不是空言，而是实际存在的事实。当时师父有另一种帮助我们的方式，他也称之为箭术精神的直接心传：如果我一连好几箭都没射好，师父会用我的弓来射几箭。这个作法的影响十分惊人，彷佛弓变得不一样了，更愿意也更谅解地让我拉开。这个现象不仅发生在我身上，跟随他学习最久与最有经验的学生，来自于各阶层的人，也都视之为理所当然的事实，很奇怪我的明知故问。相同道理，剑道大师们都坚决相信，每一把剑都灌注了铸剑师无限的心血与精神，他们在铸剑时都穿著定式的服装。他们的经验无比丰富，技巧无比纯熟，对于每一支剑的特性都了然于心。\n一天，我的箭刚脱手，师父便叫道，「这就是了！向目标鞠躬！」然后，我瞥向箭靶─很抱歉，我实在忍不住─看见那支箭只是射在箭靶边缘上。\n「那一箭射对了，」师父肯定地说，「开始时理当如此。不过今天到此为止，否则下一箭你会特别费心，破坏了一个好的开始。」\n后来在许多的失败中，偶尔会有连续几箭正确地击中箭靶。但是只要我的脸上露出丝毫的满意神色，师父便会以少见的严厉相向。「你在想什么？」他会叫道，「你已经知道射坏了不要难过；现在必须学习射好了不要高兴。你必须使自己解脱于快乐与痛苦的冲击，学习平等超然地对待它们，你的高兴要像是为了别人射得好而高兴，不是为了你自己。你必须要不断地练习这个作法，你无法想像这有多么重要。」\n在接下来这几周，这几月里，我度过了我这辈子最艰苦的学习历程。虽然我无法轻易接受这种纪律，但我逐渐明白我实在受惠良多。它摧毁了我最后一丝对于自己的顾虑与情绪的起伏。一天在我射了极好的一箭后，师父问我，「你现在明白了我说『它射了』，『它射中』的意思吗？」\n「恐怕我根本什么都不明白，」我回答，「甚至连最简单的事都陷入了混乱之中。是『我』拉了弓，或者是弓拉了我到最高张力状态？是『我』射中了目标，或者目标射中了我？这个『它』用肉眼来看是心灵的，用心眼来看则是肉体的？或者两者皆是？弓，箭，目标与自我，全都融合在一起，我再也无法把它们分开，也不需要把它们分开。因为当我一拿起弓来射时，一切就变得如此清楚直接，如此荒唐的单纯…」\n「现在，」师父插嘴道，「弓弦终于把你切穿了。」\n7结束与开始 五年多过去了，师父建议我们去通过一次考试。「这不仅是技术的表现，」他解释，「射手的精神气度占有更高的价值，连最细微的动作都要算数。我期待你们不要因为旁观者在场而分心，要十分平静地完成定式，旁若无人似的。」\n之后几个星期，我们也没有把考试放在心上；一句话都没有提及，一堂课常常射了几箭就下课了。相反的，师父要我们在家里进行定，练习步伐与姿势，尤其要注意正确的呼吸与深沉的专注。\n我们按照指示，在家里不用弓箭地练习定式，习惯之后，我们马上发觉自己很快便进入不寻常的专注状态。我们越是放松身体，这种专注的感觉也越强烈。当我们上课后，再次用弓箭练习定时，这些家庭练习的效果宏大，我们能够毫不费力地滑入「当下的真心」状态中。我们对自己极有把握，因此能够以平等无差别的心情期待著考试之日，以及旁观者的来临。\n我们成功地通过考试，师父不需要用困窘的微笑来博取观众的宽宏。我们当场就领了证书，上面注明了我们熟练的等级。师父穿著庄严的大袍，精彩地射了两箭，作为典礼的结束。几天之后，我的妻子也在一场公开考试中获得了花道师父的头名。\n从那时开始，课程换了新面貌。每次师父只要求我们射几箭就满意了，然后他会开始配合我们的程度讲解「大道」与射箭艺术的关系。虽然他所讲的都是神秘的象征与晦涩的比喻，但是只要些许提示，便足以让我们理解其中的含意。他花最多时间的是「无艺之艺」，这是箭术追求完美的目标。「能够用兔角和龟毛来射箭，而不用弓（角）箭（毛）便能击中靶心的人，才担当得起大师的尊称─无艺之艺的大师。诚然，他本身就是无艺之艺，大师与非大师集于一身。在此时，箭术成为不动之动，不舞之舞，进入禅的境界。」\n我问师父，当我们回到欧洲后，没有了他，我们要怎么办？他说，「你的问题已经在这次考试中得到解答。在你们目前的阶段，老师与学生已不再是两个人，而是一个人。你随时都可以离开我。就算是大海相隔，只要当你们练习你们所学时，我就会与你们同在。我无须提醒你们保持规律的练习，不要因为任何理由中断，每天都要进行定，即使没有弓箭，至少也要做正确的呼吸练习。我无须提醒你们，因为我知道你们永远不会放弃这心灵上的箭术。不用写信告诉我，只要偶尔寄一张照片给我，让我能看到你们拉弓的情形。如此我就会知道一切我需要知道的。\n「还有一件事我必须警告你们。这些年来，你们已经变成了另一个人。这就是射箭艺术的真义：射手与自己的剧烈斗争，影响深远。也许你们还没有注意到，但是当你们回到自己国家，重逢亲朋好友时，便会强烈的感觉到这种改变：事情不再像以前那样和谐了。你们会用另一种眼光观看事物，用另一种标准衡量事物。以前这也发生在我身上，这会发生在所有被这种艺术精神触及的人身上。」\n在道别，而又不是道别的时刻，师父把他最好的弓送给我。「当你用这张弓射箭时，你会感觉到老师的精神与你同在。不要让它落入好奇人士的手中！当你不需要它时，不要搁著当纪念品！毁掉它，除了一堆灰烬，什么都不要留下。」\n8从箭术到剑道 讲到这里，我怕许多读者会心生怀疑，既然箭术在战斗中已失去了重要性，它仅以一种十分复杂的心灵形式幸存，所以它的升华并不十分健全。我实在不能怪他们会有这种想法。\n因此我必须再次强调：日本的艺术，包括箭术，并不是在近代才受到禅宗的影响，而是有好几世纪的渊源了。事实上，一个古代的箭术师父如果有机会，他对于箭术本质的言论与今日师父将不会有任何差异。对于箭术师父而言，「大道」是一个活生生的现实。数世纪以来，射箭艺术的精神始终未变─就像禅宗一样。\n凭我自己的经验，我知道一定有许多疑惑徘徊不去，为了要消除这些疑惑，我建议看看另一项艺术作为比较；这项艺术的战斗意义甚至到今日都无法否认，它就是：剑道。我做这个比较，不仅是因为健藏栗师父也是一个优秀的「心灵」剑道家，他常常向我指出箭术大师与剑道大师在经验上惊人的类似之处；但是，更重要的原因是，有一部从封建时代流传下来的重要文献。当时武士道盛行，剑道家必须冒生命的危险来证明他们的武术。这是伟大的禅师泽庵的一篇文章，题目是「不动的真知」。这篇文章详尽地阐述禅与剑道的关系，以及比剑的方法。我不知道这是不是唯一如此仔细并且卓越解释剑道「大道」的文章，也不知道在箭术方面是否有类似的著作。不论如何，泽庵的文章能够保存至今是非常幸运的。这要归功于铃木大拙，他把这封泽庵写给一位剑道大师的信，几乎未加节略地翻译出来，使广大的读者能够接触到它（注：「禅宗对日本文化的影响」，铃木大拙著，1938年）。我以自己的方式把这项资料安排整理，尽可能清楚扼要地解释剑道在过去的意义，以及今日的大师们对剑道意义所拥有的共同看法。\n在剑道师父自己与学生的经验里，一个共同认定的事实是，任何初学剑道的人，不论他有多么强壮好斗，勇敢无畏，一旦开始学习之后，很快就会失去自觉与自信。他开始理解在战斗中所有因技术而造成生命危险的可能性，虽然他很快就能训练自己的注意力到极限，能严密地监视对手，正确地拨开刺来的剑，并有效地反击，但是他事实上要比未学前更糟；在以前，凭著当时的灵感与战斗的喜悦，他半开玩笑，半当真地随意乱挥剑。现在他却不得不承认，他的生命是掌握在比他更强，更灵活，更有训练的敌人手中。他别无选择，只有不断地练习，他的老师在这时候也没有其他的建议。所以初学者孤注一掷，只求胜过别人，甚至胜过自己。他学得了卓越的技术，恢复了部份失去的信心，觉得他是越来越接近他的目标。然而，老师却不这么想─根据泽庵，这才是正确的，因为初学者的所有技术都只会使他的「心被剑所夺」。\n然而初期的教导也别无他法，这种方式最适合初学者。但是它无法到达目标，老师非常清楚这一点。学生单靠热忱与天赋是无法成为剑道家的。虽然他已经学会不被激战冲昏了头，能保持冷静养精蓄锐，长时间战斗，在他自己的圈子里几乎找不到敌手─但是为什么，以最高的标准来判断，他仍然败在最后一刻，毫无进步呢？\n根据泽庵，其中的原因是：学生无法不注意他的对手与他的剑法；他一直在想著如何制服对手，等待对手露出破绽的时候。换言之，他把所有时间都放在他的技术与知识上。如此一来，泽庵说，他就失去了「当下的真心」，决定性的一击永远来得太迟，他无法「用对手的剑击败对手」。他越是想靠自己的反应，技巧的意识运用，战斗经验与战略来寻求剑法的卓越，他就越妨碍到自由的「心灵运作」。这要怎么办呢？技巧要如何才能「心灵化」？技术的控制要如何才能变成剑法的掌握？根据「大道」，唯有使学生变成无所求与无我。学生不仅要学习忘掉对手，更要忘掉自己。他必须超越目前的阶段，永远抛诸脑后，甚至冒著不可挽救的失败危险。这话听起来，不是像「射手不瞄准，不能想要击中目标」的主张一样荒谬吗？然而，值得记住的是，泽庵所描述的剑道精义已在数千次决胜战斗中得到了证明。\n老师的职责不是指明途径，而是使学生能感觉到途径来适应自己的个人特性。因此，老师首先训练学生能够本能地避开攻击，甚至在完全毫无准备的情况下。铃木大拙以一个很精彩的故事，来描述一位老师对于这项困难的任务所采取的极具创意的作法：\n日本剑道老师有时候会使用禅宗的训练方法。有一次，一个年轻人来找一位师父学习剑道的艺术，这位师父已经退休住在山顶小屋中。他同意收这位学生。他要学生帮助他收集木柴，挑水劈柴，生火煮饭，打扫照料庭院，以及处理一般的家事。但是没有正式的剑道训练。过了一段日子，年轻人渐渐感到不满，因为他不是为这老人做佣人而来，他是要学习剑道。所以有一天他要求师父教导他。师父同意了。结果从此这个年轻人无论做什么都没有安全感。当他早上开始煮饭时，师父会突然从背后用木棍打他。当他在扫地时，也会遭受到不知何处，突如其来的打击。他没有片刻宁静，必须时时戒备。几年之后，他才能够成功地躲开那不知来处的一击。可是师父对他还不很满意。有一天，师父自己在火堆上煮蔬菜。学生突然想到要利用这个机会。他拿起大棍，往师父的头上砸下去，师父正弯腰搅拌锅里的菜。但是学生的木棍马上就被师父用锅盖架住了。这打开了学生的心灵之眼，使他窥见了奥秘的剑道精髓，他也第一次真正体会到师父无比的慈悲。（注：「禅宗对日本文化的影响」，铃木大拙著，1938年）\n学生必须发展出一种新的感官，或更正确地说，使他的感官产生新的警觉，这样他才能避开危险的攻击，彷佛他能感觉到它的来临。一旦他熟悉了这种闪躲的艺术，他便不需要专注于对手的动作，甚至好几个对手也无妨。他可以看到，感觉到将要发生的事，同时他已经避开了，在察觉与闪躲之间是没有「毫发之差」的。这才是重要的：不需知觉注意，迅如闪电的反应。这样一来，学生终于使自己超越一切意识性的目标。这是个伟大的收获。\n真正困难而且重要的工作，是使学生不要想伺机攻击他的对手。事实上，他应该完全不要想他是在对付一个非你死即我活的对手。\n开始时，学生会以为——他也只能这么以为——这些教诲的意义是指不去观察或思索对手的行动。他非常认真做到这种「非观察」，控制自己的每一步。但是他没有发觉，如此地专注于自己，他必然会把自己看成一个不惜一切代价避免注意对手的剑客。不管他怎么做，他的心中仍然暗藏著一个自我，只是在表面上超然于自我，他越是想忘掉自我，他就越是紧紧地与自我绑在一起。\n要许多非常微妙的心理引导才能使学生相信，这种注意力的转移在基本上是毫无益处的。他必须学习断然地放开自己，如同他放开对手一样，说得极端一点，他必须成为不顾自己，毫无所求。这需要极大的耐心，极艰苦的训练，就像箭术。一旦这项训练达到目标，最后一丝的自我牵挂就会消失在纯粹的无所求中。\n在这种无所求的超然之后，会自动产生一种和前述的本能闪躲极类似的行为模式。就像那种阶段，觉察与闪避攻击之间是不容一发的；现在，在闪躲与反击之间也是没有时间上的差距。闪躲的同时，战斗者伸手向后，一闪之间，致命的反击已经发出，准确而不可抗拒。彷佛剑自己挥舞起来，就像在箭术中「它」瞄准而击中，所以在此处，「它」取代了自我，发挥了自我经过刻意的努力所获得的熟练与敏捷。同样地，这里的「它」只是一个名字，代表了某种无法理解，无法掌握的事物，只有亲身经验过的人才能觉察。\n根据泽庵，要达到剑道艺术的完美境界，必须心中没有你我之分，没有对手与他的剑，也没有自己的剑与如何挥舞的念头─甚至没有想到生与死。「一切皆空无：你自己，那闪烁的剑，那挥舞的手臂。甚至连空无的念头也不复存在。」从这绝对的虚空中，泽庵说，「展现了最奇妙的作为。」\n箭术与剑道的道理也可以应用在其他艺术上。水墨画的熟练要先使手的技术达到完美的控制，能够把心中刚成形的意象立即画下，中间没有毫发之差。绘画成为自发的书法。在这里，画家的教诲可能是：花十年时间去观察竹子，把自己变成竹子，然后忘却一切，动手去画。\n像初学者一样，剑道大师是无自我意识的。在刚开始学习时所丧失的那种不在乎的态度，最后又回来了，而且成为他永远不灭的特质。但是，与初学者不同的是，他谨慎收敛，平静而不傲慢，丝毫无意炫耀。从学生到师父，中间要经过长年不断的练习。在禅的影响下，他的熟练成为心灵化，而他自己，历经心灵的挣扎奋斗，已经脱胎换骨了。现在剑变成了他的「灵」，不再只是轻若鸿毛地放在剑鞘中。他只有在无法避免的情况下才拔剑。因此他会时常避开自不量力的对手，像是卖弄肌肉的浮夸人物，他会以不在乎的微笑任人嘲讽他怯懦；而在另一方面，基于尊敬一个有价值的对手，他会坚持决斗，这种决斗没有任何意义，只是给予输者一个光荣的死亡。这就是剑客的情操，独一无二的「武士道」精神。因为，高于一切，高于名誉，胜利，甚至高于生命，是那引导他，并且审判他的「真理之剑」。\n像初学者一样，剑道大师是无所畏惧的，但是，不像初学者，他一天比一天更远离恐惧。多年不断地静心沉思使他知道，生与死在基本上是一样的，是一体的两面。他不再畏生惧死。他在世上快乐地活著，这完全是禅的特色，但是他随时准备离开世间，丝毫不为死亡的念头所困扰。武士选择脆弱的樱花做为他们的象徵不是没有原因的。就像一片花瓣在朝阳中宁静飘落地面，那无畏者也如此超然于生命之外，寂静无声而内心不动。\n从死亡的恐惧中超脱出来，并不是表示在平时假装自己面临死亡时不会颤抖，或没有什么可怕的。对于生死处之泰然的人是没有任何恐惧的，他甚至无法再体验恐惧的滋味。没有受过严格而漫长的禅定训练的人，无法理解禅定征服自我的力量有多大。完美的大师无论何时，无论何处都会流露出他的无惧，不是经由言语，而是表现在他整个人的举止行为上：旁人只要观看他，就会深深受到影响。这种无可动摇的无惧便是最高的成熟，因此只有少数人能达到。为了说明这一点，我将引用十七世纪中叶的著作「叶隐集」的一段故事：（译注：叶隐集作者为和尚常朝。记载肥前锅岛藩侯的事迹）\n柳生但马守宗矩是一位伟大的剑道家，也是当时幕府将军德川家光的剑道师父。有一天，将军的一位贴身侍卫来找柳生，希望学习剑道。师父说，「据我的观察，你自己似乎也是一个剑道大师；在我们成为师生之前，请先告诉我你的师门。」\n那侍卫说，「我很惭愧，我从未学过剑。」\n「你想要骗我吗？我是将军大人的老师，我的眼光是不会错的。」\n「我很抱歉冒犯了您的荣誉，但是我真的一无所知。」\n访客的坚决否认使大师陷入了沉思，最后他说，「如果你这样说，那一定是事实了；但是我仍然确信你是某方面的大师，虽然我不知道是什么。」\n「如果您一定要我说，我就告诉您。只有一件事我可以说是完全有把握的。当我还是个小孩时，就想到如果要做武士，无论如何不能怕死。对于死亡的问题，我已经奋斗了好几年。最后死亡的问题已不再能够困扰我。您所指的是否就是这个呢？」\n「这就对了！」柳生叫道，「这就是我所指的。我很高兴我并没有看走眼。因为剑道的最高奥秘就是从死的念头中解脱。我已经如此训练了千百个学生，但至今还没有一个真正得到这项剑道的最高证明。你不需要技术上的训练，你已经是个大师了。」\n自古以来，学习剑道的道场都被称为「启发场」。\n每一位修练被禅所影响的艺术大师，都像是从包容一切的真理之云中射出的一道闪电。这种真理存在于他自由自在的精神中，而在「它」面前，他又体验了真理─他自己那原始而无名无状的本质。他自己一再接触这项本质，他的本质具有无限可能性─于是真理对他，以及透过他对其他人，展现了千万种不同面貌。\n尽管他耐心与谦逊地接受了前所未有的训练，但是要想达到一切行动都沉浸于禅的境界，使得生命中每一刻都完美无缺，他还有很长一段路要走。那最高的自由对他而言，仍然不是绝对的需要。\n如果他无法抗拒地感到必须达到这个目标，他就必须再度出发，走上那通往无艺术的艺术之路。他必须敢于跃入「本然」，生活在真理中，一切以真理为准，与真理成为一体。他必须再度成为学生，成为一个初学者；克服那最后，也最陡峭的一段路，经历新的转变。如果他能从这场危险的考验中幸存下来，他便完成了他的命运：他将亲身见证那不灭的道理，那一切真理之上的真理，那无形根本之根本，那同时是一切的虚空；他将被它所吸收，然后从中得到了重生。\n附录─禅道 海瑞格教授过世于1955年。他生前只出版了一本书，就是本书「射箭艺术中的禅」。后来在他的文札中发现许多关于禅宗理论的笔记，经过海瑞格夫人的整理，编辑成书，在德国出版时书名就叫做「禅道」（DerZen-Weg）。\n","permalink":"https://nagisa3113.github.io/posts/zen/","title":"射箭艺术中的禅"},{"content":"记录一下原专业学习的内容\n传播是人们之间的信息传递\n传播学\n传播是一种行为 与信息相关 是一种交流 研究对象是人类、人类的行为 分类\n影响说 反应说 互动说 共享说 发展与奠基人 拉斯韦尔(5W) 列文(群体动力论) 拉扎斯菲尔德(两级传播论) 霍夫兰(劝服传播) 施拉姆(正式建立传播学) 基础流派 empirical school critical school Frankfurt school Political Econmoy 思想通知理论学派 cultural studies 传播类型和传播模式 内向传播 人际传播 组织传播 大众传播 传播者和受众分析 传播者 在传播活动中,借助特定媒介发布信息的人\n传播者又是受众\n分离关系(西藏暴乱事件) 合作关系(中朝对美报道) 同化关系(国家和党的政策) 列文“把关人”理论 “报刊的四种理论” 布里德“潜网说” 德弗勒“媒介与社会系统的结构依赖关系” eg：《一个馒头引发的血案》版权问题\n受众 信息的接受者\nThe Magic Bullet Theory, hypodermic-needle theory The limited-effects theory One-sided \u0026amp; two-sided Messages Bi-polar Communications Theory Moderate effect theory The Use and Gratification Agenda-Setting The Powerful Effects The Spiral of Silence Social expectations theory 1975,勒弗德综合归纳为 个人差异论 社会类别论 社会关系论 文化规范论 传播曲线论 传播效果 受众的动机 获取信息 消遣娱乐 获取知识 社交需要 传受关系 自主性、选择性 选择性注意 选择性理解 选择性记忆 被动性、无目的性 被强迫性 增加传播效果的手段 传播媒介分析 媒介即medium\n媒介特点对比\nH.A.Innis: bias theory time bias space bias M.Mcluhan: 媒介决定论 媒介即信息 媒介是人体的延伸 媒介和冷与热 J.Meymwitz: 媒介环境论 前台行为与后台行为 情景就是信息系统 不同的行为需要独特的情景 电子媒介能促成不同情景的合并 Z.Brezinski: 媒介失控论 世界强国的关键是文化力量及全球传播能力 媒介是失控与混乱之源 传播内容分析 符号 信息传播过程中人们为了传达信息而用以指代某种事物(信息)的中介\nFerdinand de saussure 1857-1913\n能指: 人们感官可以感知的部分 所指: 符号所包含的意义与概念 符号与意义的结合使社会约定俗成的结果 符号类型 语言符号: 语音、字形、词汇、语法 非语言符号: 不以人工创造的语言为符号,而以其他感官诸如视觉,听觉,嗅觉,味觉,触觉等感知为信息载体的符号系统 符号的特点 指代性 约定性 社会共有性 发展性 符号的编码和解码 香农\nSymbolic Interactionalism 施拉姆:一个人发出符号，另一人在某种程度上使用了这些符号\n人们不仅对彼此的行动直接作出反应，还理解或确定彼此行动;根据他们赋予这些行动的意义做出反应。 前提:AB双方具有可共通的意义空间，也称共同经验 内容影响受众 含义结构论\n含义的确定 含义的延伸 含义的代替 含义的强化 信源理论\n专业性 权威性 知名度 劝服传播论 拉斯韦尔的五个W Who Says What In Which Channel To Whom With What Effect 传播功能分析 早期研究 “社交性”和“自我中心”功能 “工具”功能 “满足感”与快乐感” 当代研究 莫顿: 结构-功能主义 媒介系统也是社会大系统的一个子系统，媒介则是在履行其特定的维持这种平衡性的功能\n社会理论:Functionalism\n社会是一个庞大的有机系统 每个社会部门都具有特定的功能 分工合作，彼此的协调和制约，保持社会大系统的稳定 社会稳定——有效; 社会不稳定——失效 拉斯韦尔的三功能说 检测环境 协调社会 遗产传递 “娱乐” 拉扎斯菲尔德的三功能说 与默顿合著《大众传播的社会作用》\n赋予社会地位 促进社会规范 麻醉功能 施拉姆的传播功能说 《media communication and human》\n政治功能 经济功能 一般社会功能 传播功能 基本功能 消极功能 信息沟通功能 政治信息的沟通 经济信息的沟通 人类日常生活信息的沟通 跨文化传播的不对等 信息传播的不对等 各国家/民族之间的文明冲突 文化霸权 社会整合功能 组织 协调 监督权利 麻醉作用 电视人和容器人 减少社会实践 对社会现实漠不关心 社会教育功能 进行社会教育 培养社会角色 虚假信息的散播 制造假新闻,歪曲、偏见和炒作 破坏正常、健康的传播秩序 娱乐功能功能 放松、度过休闲时刻 泛“娱乐化” 逃避现实、引导文化低俗化发展 传播模式分析 模式是用文字、图表或数字形式描述某种结构或过程，以再现现实的一种理论性的、简化的形式\n结构主义理论 社会由结构组成\n信息论 1948年 香农(Claude E. Shannon)《传播的数学理论》\n提出了信息的概念 提出传播过程的基本模式对传播研究及其模式有过重大影响 控制论 威纳(Norbert Wiener)在1948年《控制论》中提出了反馈的概念。反馈是指信息的部分回流\n反馈(feedback)这个概念引入传播过程研究，指导我们认识人类社会传播的互动性与双向性。 系统论 亚里士多德：整体大于各个孤立部分之和\n从整体的联系的角度看待整个传播学 线性传播模式 单向的过程，没有信息反馈; 孤立性、静止性，缺乏对社会环境和背景的考察\n拉斯韦尔的5W模式 香农-韦弗数学模式 控制传播模式 复杂因素考虑不够(媒介因素、个人心理)默认传输信息与接收信息等量\n奥斯古德-施拉姆的循环模式 拉姆大众传播模式 德弗勒模式 系统模式 赖利夫妇模式 马莱茨克模式 互动传播模式 罗杰斯和金凯德的辐合传播模式 马莱茨克模式 传播与文化 文化形成一种道德规范力量，影响着我们的传播活动\n传播对文化的影响 传播是文化的粘合剂 形成社会群体的文化形态 不断寻求文化认同 传播是文化的助推器 文化对传播的影响 传播体制的制约 国家或政党与新闻事业的关系 媒介所有权的归属 社会同新闻事业的关系 传播机构的管理方式 对传播方式的制约 中国“名正言顺”的儒家思想 深圳经济特区“时间就是金钱” “新文化运动”的反封建思想 “阿姨”“女佣” 英国“尊贵和正统”的君主思想 美国“凡事皆可幽默”的移民思想 对传播内容的制约 文化禁忌 意识形态 文化的特点 发展性 多元性 群体性 传播与大众文化 主流文化以中心意识形态为基础而形成的文化系统 精英文化知识分子话语，对纯粹的知识性和人文态度的追求 大众文化文化工业的产物，以市场需求为标准 话语特征 意识形态色彩、政治性、权威性 启蒙性、独立性、自律性、超前性 商品性、通俗性、娱乐性、新奇性 表现形式 传达政治方针、宣传思想、 讴歌政党的丰功伟绩等 对艺术的追求、对现实的批判、对社会的反思等 对交换价值的追求; 消费文化-消费者 代表作品 主旋律、红色经典、红歌、 新闻联播、春晚 《世纪大讲堂》、《文化中国》、 《风华国乐》 流行歌曲等 维护方式 政策引导、审查制度、奖励 自律，媒体素养培训 商业广告、鼓吹社会的消费心理 主流文化 精英文化 大众文化 商业电影的叙事手法 政治化，伦理化，教化倾向 个性化，迫使人们正视现实,深度追求 追求受众的认同，逃避现实，释放心理中潜在的欲望 全球化与跨文化传播 文化同质化: 跨文化传播的失衡现象 难以与美国大众文化抗衡 文化异质化:文化融合而已，没有谁取代谁 文化霸权论 文化保护主义 理论补充 知沟理论(Knowledge Gap Theory) 1970年(P. Tichenor)《大众传播流动和知识差别的增长》\n由于社会经济地位高者通常能比社会经济地位低者更快地获得信息，因此，大众媒介传送的信息越多，这两者之间的知识鸿沟也就越有扩大的趋势”。 几乎所有大众传播理论，对信息增加即可增加知识这一命题特积极态度。而知沟理论认为信息增加也会给社会带来负面的影响 最初表现为学龄前教育程度的差异，进而表现在校学习成绩的差异和高等教育升学率上的差异，最终会表现为职业，收入和社会地位上的差异。 具体表现\n传播技能上的差异\n较强的理解能力和较大的阅读量，有助于对公共事务或科学知识的获取——360抢票软件\n知识信息储备上的差异\n见多识广，对新事物、新知识的理解与掌握也就越快——自主招生\n社会交往方面的差异\n教育通常意味着日常行动圈子较大——国际沙龙，出国交流\n媒介使用和记忆方面的差异\n以符号的方式记忆信息。个人生活的水准、层次与大众传媒的内容越接近，对媒介的接触和利用程度就越高\n媒介性质上的差异\n多数有关科学和重要事务信息发布于纸媒，而纸媒更符合受教育程度高的受众的使用习惯\n框架理论 Goffman认为框架是人们将社会真实转换为主观思想的重要凭据，也就是人们或组织。对事件的主观解释与思考结构\n社会资本理论(social capital theory) 所谓社会资本，是指个人在一种组织结构中，利用自己特殊位置而获取利益的能力。 一般就是指人脉关系，一个人能从这些关系中获取得利益越高 ，那么他的社会资本就越高\n第三人效果理论(third person effect) 人们在判断大众传媒的影响力时存在着一 种普遍的感知定势。 即倾向于认为大众媒介的信息对自己未必 产生多大影响，然而对“他”人产生不可 估量的影响。\n电视色情内容对儿童影响 互联网不良信息的管制， 同性恋婚姻合法化 传播研究方法 定性研究 多以语言和符号为分析对象，文献研究，实地观察，深入访谈，小组讨论，人类学日志法，个案研究\n定量研究 数理统计和计算机为辅助手段，统计分析验证 假设，实地调查，控制实验，内容分析\n总结 集大成者 施拉姆 两大流派 经验学派(杜威、库利、帕克、米德、李普曼) 批判学派 三大论 信息论 控制论 系统论 四大先驱 拉斯韦尔 卢因 拉扎斯 菲尔德 霍福兰 五大研究领域 控制分析 内容分析 媒介分析 受众分析 效果分析 Harold D. Lasswell 1902-1977 拉斯韦尔明确提出传播过程及其五个基本构成要素\n谁传播(who)——控制分析 传播什么(says what)——内容分析 通过什么渠道传播(in what channel)——媒介分析 向谁传播(to Whom)——受众分析 取得了什么效果(with what effects)——效果分析 Kurt Lewin 1890——1947 把关人、场论、群体动理论 他的学术成就主要体现在他最早创造性地提出了心 理学中的“场论”和“群体动力论”。借用物理学的概念，他认为一个群体就是一个场，必须将群体视为一个整体，而不是成员个体的简单相加。在群体和个体的关系中起决定作用的是群体而不是个体 Paul Lazarsfeld 1901-1976 两级传播论 1940年主持的一项研究发现，在总统选举中选民们政治倾向的改变很少直接受大众传媒的影响，人们之间直接的面对面交流似乎对其政治态度的形成和转变更为关键。通常有关的信息和想法都是首先从某一个信息源如一个候选人那里通过大众媒介达到所谓的意见领袖那里，然后再通过意见领袖把信息传播到普通民众那里 Carl Hovland，1912——1961 劝服传播，单面理双面理 研究人的心理对人的行为的影响，具体而言就是研究说服与态度的关系、态度的形成于转变、说服的方式、技巧与能力等 Wilber Schramm， 1907-1987 集大成者 把美国的新闻学与社会学、心理学、政治学等其他学科综合起来进行研究，在前人传播研究的基础上，归纳总结，修正并使之系统化，从而创立一门新学科——传播学 传播者相关理论 W·吉伯与W·约翰传者与信源的关系 赛伯特，彼得森和施拉姆“报刊的四种理论” 布里德“潜网说” 德弗勒“媒介与社会系统的结构依赖关系” 受众相关理论(传播效果理论) 靶子论 20世纪30年代 有限效果论 20世纪40年代 霍夫兰(一面理两面理): 控制实验法 拉扎斯菲尔德(两级传播理论): 实地调查法 适度效果理论:20世纪50年代末 凯茨“使用与满足模式” 麦库姆斯和肖“议程设置理论” 新强效力论:20世纪70年代 纽曼“沉默的螺旋” 德弗勒“社会期待理论” 个人差异 社会类别 社会关系 文化规范 媒介相关理论 麦克鲁汉\n媒介是人体的延伸(地球村) 媒介即信息 媒介的热和冷 媒介特点对比(报纸,电视,电影,网络) 媒介控制因素(政治，经济，文化，技术)\n传播内容理论 符号互动论 文化的编码和解码过程 模仿论—班杜拉 含义结构论—含义的确定;含义的延伸;含义的替代;含义的强化 传播功能理论 默顿与结构-功能主义 拉斯韦尔的三功能说:监测环境、协调社会、遗产传递 赖特对三功能说的补充 拉扎斯菲尔德的三功能说:赋予社会地位;促进社会规范;麻醉功能 施拉姆的传播功能说 基本功能与消极功能的对比 ","permalink":"https://nagisa3113.github.io/posts/communication/","title":"传播学原理"},{"content":"文: 赵皓阳\n引子 有这样一个故事：\n有一条恶龙,附近的村民深受其害,每年这个村庄都会有一个少年英雄去与恶龙搏斗,但无人生还.又一个英雄出发时,有人悄悄尾随.龙穴铺满金银财宝,看到英雄用剑刺死恶龙,然后坐在尸身上,看着闪烁的珠宝,慢慢地长出鱗片、尾巴和触角,最终变成恶龙.\n首先要理清楚：勇士的性质是什么、恶龙的性质是什么、勇士是一个人还是一群人、是自始至终的还是中间换了人、是成了新的恶龙还是什么别的东西……这些都需要讨论,用简单的二元模型来解释复杂的世界往往会南辕北辙.所以今天,我们就好好理清楚这件事.再附上一个大家最关心的问题：怎么办？虽然是一个不曾成功的方法论,但依然有很重要的参考意义.\n一 毛泽东的秘书王力,在《反思录》有一节“使毛泽东经常睡不着觉的一个问题“:\n毛泽东早就发现了,从中央到基层党支部,很多都是独立王国.你不摸他,一点事都没有,还照常是模范,照常当劳动英雄,照常是人大代表,只要你去摸一下,几乎都有问题.很多是公、侯、伯、子、男的封建统治,使党脱离群众,究竟怎么办？这是使毛泽东经常睡不着觉的问题,必须要解决的问题. 好多红旗单位,一摸几乎都有问题,土皇帝很多,他们都有天然的经济特权,超经济的政治特权.土皇帝的一句话就是法,他一句话就能捉人,反对他就是反党、反社会主义、反革命,这样下去党就要被人民打倒了. 毛泽东多次说：这到底该怎么办？整党,不行；教育,不行；整风,不行；三反五反,人也杀了,大老虎也枪毙了,也撤了职,什么办法都用了,还是不行.于是才搞“四清”,大动干戈,还是不行.我什么办法都用了,最后没有办法了,就来一个自下而上的运动,把党放在一边,让群众来揭露党的黑暗面,因此就发动了文化大革命,搞了这样一个大的尝试.\n毛泽东对于文革的看重超乎想象,他会说自己人生就干了两件大事,一是成立新中国,二是文化大革命.这其中的道理,我们现代人很难明白,因为许多史料我们看不到了,有些人也不希望我们看到,放眼全球,有哪个国家开国元勋的最后一本著作会成为禁书？ 哈佛大学终身教授马若德（另有译名罗德里克•麦克法夸尔）,西方“文革学”的重要创始人,著有《文化大革命的起源》三大卷.他与费正清（JohnKingFairbank)共同主编的《剑桥中华人民共和国史》中用了这些话来描述文革：“这场运动多半是毛泽东个人决策的结果”是“毛泽东对革命纯洁性永无止境的追求”以及他的“非凡权威”和“民粹主义观念”,“决定了这一运动的方式、面貌以及全部过程”.\n纵使在上世纪六十年代,新中国政府是当时世界上最清廉的政府之一,然而毛泽东看到了官僚主义的抬头,他担心自己过世之后,没人会镇得住这些官员,官员的子女、亲戚将会成为新的权贵阶级,带来新的压迫与剥削,这就是他死前念念不忘的修正主义,这就是他发动文革的根本动机.用他的原话：“造反有理”“天下大乱才能天下大治”\n他看到了前苏联,看到了干部的子女依然干部,底层工人依然是工人,看到了新的金字塔在慢慢形成；他看到了大跃进期间自己的官僚集团是怎样欺上瞒下“扛着红旗反红旗”的时候；他看到了“四清”运动的时候,自己亲密的战友、把自己思想写进党章的亲密战友,是怎样背叛了他的理想蓝图的时候,他愤怒了：\n“我身边睡着中国的赫鲁哓夫！”\n可以看出,毛泽东已经默认：勇士变成恶龙的结局无法避免,那么我们就用把《屠龙术》代代相传,不断培养起新的勇士,去取代长出鳞片的恶龙.所以他说文化大革命要七八年来一次,后来会见外宾的时候又说二十年来一次(可能他所见到巨大的社会破坏性让他犹豫了）,宛如自然循环一般不断更新.\n他年轻吋,因为想让中国人民不受三座大山的压迫,用了大半生的吋间建立了一个新的政党和国家；当念过古稀的他发现自己一手建立的政党背叛了自己的理想、很可能会成为新的压迫人民的大山吋,又用了他一生的荣耀和最后的生命去摧毁他.上这种古希腊式的悲剧英雄经历着实让人着 迷.\n柯南剧场版《贝克街的亡灵》: 让我们来一场以中华大地重新来过为胜负的赌注吧!\n二 要想正视那一段历史,就必须先要了解那一段历史.学者韩少功就指出,“文革学”有三大泡沬：宫廷化、道德化、诉苦化.他说：\n所谓“文革”史的宫廷化,是指叙事者们的目光始终聚焦国家高层,总是把历史写成一部领袖史. ……从总体看,毛泽东不过是毛泽东“群发现象”中威权最高的一个,最有影响力和能见度的一个,如此而已.最有影响力,使他对“文革”不可能不承担主要领导责任.最有能见度,则可能遮蔽了他被掣肘、被裹胁、被引导、被影响、被代理、被推动、被造就的大量隐情,遮蔽了聚光圈外的体制条件和环境制约,即看不见的历史之手.这几乎是一切领袖人物的命运. 道德化是“文革”研究中另一个普遍的毛病. 捕风捉影,有罪推定,信口开河,道德诛心,使一场严肃的反思可能降至大字报水平,沦为八卦和扒粪.于是历史清算成为一个半拉子工程,反增了清算的难度.与其说这是批判“文革”,不如说这是暗中延续“文革”中常见的思维方式和言说风格……\n我们历史课本是这样定义文革的：“是一场由毛泽东发动,被反革命集团利用,给党、国家和各族人民带来严重灾难的运动.”我一直说我们教科书是高级黑,“反革命集团利用”一一反革命集团是谁,利用是怎么利用？\n有一些反革命集团是能说的,有一些是不能说的.比如说为什么第一波被发动起来的红卫兵都是红二代、红三代,是要被革命的权贵子女；为什么“老子英雄儿好汉”这种封建血统论的糟粕,反而会成为早期文革口号；比如为什么运动瞬间失控,“要文斗不要武斗”的话有如一纸空文；比如为什么毛在运动之初就一直在怒斥“有人扛着红旗反红旗”“我是钟馗,有人借我去打鬼”；比如为什么大跃进中饿死人的县长、省长被判刑,在文革结束后又被“平反”了？这些,都是不能说的.这些都是不能说的东西,我举一个历史上的例子,大家就明白了. 我们读史书的时候可能都会有这种感觉,就是王安石变法期间所谓的“旧党”要比支持变法的“新党”,可爱的多.旧党都是谁啊,司马光、欧阳修、程颢程颐、苏轼苏辙这一级别的,哪个都是博学大儒、风度翩翩,道德文章一样不差.新党都是些什么人呢,章惇、蔡京这一类货色,史书上都有个响亮的称号：奸臣.\n旧党,就是典型的“老油条”.北宋一朝是封建士大夫们过得最滋润的年代,朝廷俸禄给的足,皇帝尊敬,福利待遇各种好；没事了花前月下,呤诗作对,再玩一玩“一树梨花压海棠”的情趣play—一这样养着,不优雅不风度翩翩才怪.老油条们就觉得,万事都好啊,你变毛的法啊？\n但是,好是他们的好,不是老百姓的好,也不是国家的好.整个北宋王朝已经山雨欲来,冗兵、冗员、冗费就是三座大山.内部农民起义不断；外部对少数民族政权屈辱求和一一这也是王安石变法的大背景.我们看一下王安石变法的种种政策,可以说非常对症下药、理念超前,如果真能做起来北宋少则富国强兵,多则成为一个崛起的大一统王朝.但是呢,变法找不到执行者.\n因为变法是要损害既得利益集团的利益的,而政策的推行,又要是靠这些“老油条”一一也就是官僚士大夫的.这不就是矛盾了么.所以说王安石用人只能用谁啊,急着往上爬的新官僚.这些新官僚真正认同“变法理念”吗？也未必,他们只是看到了一条便捷的上升渠道一一因为整个官僚集团的老油条们都在与王安石或明或暗地对抗,而此时支持新法对他们来说是一个很好的升官途径.王安石也很无奈啊,他被自己提拔起来的人也坑了几次,但是总得有人干活啊,政策总得有人去执行啊.\n而真正到了执行这一点,就给了老油条们发挥的余地了,这是他们的主场. 例如“青苗法”,是由国家代替富户发放贷款,即在每年青黄不接时,由官府向农民贷款,秋后再连本带息一并归还.所定的利息2分,比农民向豪强富户借高利贷的利息低不少.此举既可免除农民所受的高利贷盘剥,又能增加国家的财政收入,利国利民.但是毫无疑问,这就触及了豪强富户的根本利益,高利贷不但是一项重要收入,更是土地兼并的关键枢纽.要知道,在皇权不下乡的年代,地方豪强和地方官吏就是一道旋转门,他们都是一个统一的特殊利益集团.于是在基层各级官吏遍开始有意无意地破坏这一举措：“务以多散为功”,“故不问民之贫富,各随户等抑配与之”；同时,官员们从中发现了另一条大发横财的道路,低息贷款演变成了官方的高利贷.朝廷规定取息2分,“而施行之际则不然也”,“出纳之际,吏缘为奸,虽有法不能禁”.以前农民向地主贷款,双方讲好价钱即可成交.现在向官府贷款,要有手续,先要申请,后要审批,最后要还贷.道道手续,都成了官员们捞取“好处费”的关卡.正如苏轼所说：“又官吏无状,于给散之际,必令酒务设鼓乐倡优或关扑卖酒牌,农民至有徒手而归者.但每散青苗,即酒课暴涨,此臣所亲见.”\n可以说,王安石变法的失败,就是来自于官僚集团“老油条”们或有意或无意识的抵制.有意识的抵制就是以破坏新法为目的,就是故意搞砸你,“扛着红旗反红旗”,这是政治斗争；无意识的抵制就是特权阶级无论怎样都能从政策中找漏洞,满足自己的一己私欲,毕竟他们才是真正的政策执行者,不管新法旧法,他们的利益总归是要满足的,北宋这艘船沉不沉就再说吧.\n就是因为王安石变法中许多政策损害了文官士大夫集团的利益,所以王安石在他们所记述的历史中,是以一个“臭傻逼”的形象出现的,一直到近代才有所改观.就是因为这些士大夫们掌握着话语权,损害他们利益的措施和人一定要添油加醋地大泼脏水,彻底踩在脚下不让翻案.便如朱元瑋这样的一代雄主,也难免会被士大夫们的历史“洗脑”,老朱一看见臣下提“理财”这两个 字就炸毛,说“理财”都是王安石这样的大奸臣才会搞,为的就是盘剥民脂民膏,想把我大明帝国搞乱、民不聊生吗？张居正变法的时候也是频繁被骂是“当代王安石”,张居正还得再反驳里面加上一句臣绝不是王安石那样的.但其实按理说王安石为官可比张居正清廉多了.毛泽东是这样评价王安石的：“在神宗皇帝时代,他搞变法,当时很多人攻击他,他不害怕.封建社会不比今天,舆论可以杀人,他能挺得住,这一点很不容易做到.”\n而毛泽东,在晚年也经历了王安石类似的困局：官僚集团在阴奉阳违,提拔上来的人多是投机分子,这是一个死局.一次老人的眼科医生上门为他检查时,发现他正捧着一本书老泪纵横,无声自泣.医生赶紧上前劝慰：“千万不能哭,眼睛要坏的.”医生仔细查看,发现书打开的那页是南宋词人陈亮的一首《念奴娇•登多景楼》,老人指其中一句良久不语,词曰：\n“六朝何事,只成门户私计”\n三 对个人崇拜的事情,林彪从来是喊得最响了,而毛自己也明白“捧得越高,摔得越狠”.以他的精明“高级黑”的道理不可能不懂,因此他不止一次就这个问题批评林彪.据邱会作回忆,九大闭幕后,毛曾下令摘掉林彪在人民大会堂和武汉东湖宾馆墙上挂的毛主席语录牌,当着林彪的面说了句“这些王八蛋的东西”.1969年6月12日,中共中央下达《关于宣传毛主席形象应注意的几个问题》,明文禁止“早请示、晚汇报”；“不经中央批准,不能再制做毛主席像章”；“不要搞‘忠字化’运动”等.\n1970年4月初,毛在审阅纪念列宁诞辰一百周年的纪念文章时,删去了“当代 最伟大的马克思列宁主义者”、“把马克思列宁主义提高到一个崭新的阶段”、“毛泽东思想是帝国主义走向全面崩溃、社会主义走向全世界胜利的时代的马克思列宁主义”等从林彪《再版前言》中摘录下来的语句.毛还写下一段批注：“关于我的话,删掉了几段,都是些无用的,引起别人反感的东西.不要写这类话,我曾讲过一百次,可是没人听,不知是何道理,请中央各同志研究一下.”一一可以看到,毛是很明白的,这些话只能徒增反感,然而“曾讲过一百次,可是没人听”.但是已经没有用了,因为毛已经成了一个政治符号,已经成了一个下面人可以扯的虎皮,某些人要借“捧毛”来捧自己,更要借“捧毛”去打压异己,毛被抬到了这个位置,就注定是骑虎难下了,这就是政治的逻辑,也是毛想打破的官僚的逻辑,然而他却被这一种逻辑所反噬,历史的讽刺.\n毛提议在四届人大上修宪,不再设国家主席,权力移交给人大和国务院.这是他打烂国家机器、拆散权力的文革理念的体现.然而林却对此非常紧张,认为这是对他“接班人”地位的否定.从执政理念上说,林彪虽然靠捧毛上台,时刻不忘高呼毛主席万岁、毛主席的话一句顶万句,但对毛的文革理念一无所知,或是压根装糊涂.于是林打着拥护伟大领袖毛主席的名义不停地劝进：毛主席怎么能不当国家主席呢？全国人民离不开毛主席的领导.毛不想当,那是他老人家谦虚.但你们不反对,你们就是对伟大领袖毛主席不忠,你们就是无产阶级的叛徒……毛初时或许还没明白,就这么一件小事, 为何从林彪到林彪的亲信轮番纠缠？后来他严厉地说出“谁想当国家主席谁当,我坚决不当,我劝你也别当”.这话一说出来,毛和林之间的裂痕已经无法弥补了.\n1970年8月23日,著名的九届二中全会开幕.在会前的宪法草案修改上,张春桥要求删去“毛主席全面地、天才地、创造性地继承、捍卫和发展了马列主义”这句话中那三个吹捧性的副词.这是非常敏感的政治风向,要知道,张春 桥绝对没有胆量在从党内到全国一片个人崇拜的狂热中提出这样的议题,这绝对是毛的授意.然而林嗅到了一丝政治危机,因为他就是靠捧毛起家,他的政治前途已经牢牢地与捧毛这张“虎皮”绑在了一起,他不能容许这样的趋势进一步发展.林彪在会上说：\n我们说毛主席是天才,是伟大的天才.但是,有个别人反对这种提法,他认为毛主席不是夭才,甚至讲什么毛主席的学说没有发展了马克思主义.这种观点是反马列主义的.我还是坚持天才这个立场,而且决不退步和动摇……所以,摆在我们面前的一个重要任务,就是要同怀疑甚至否定毛主席、怀疑或者反对毛泽东思想的人进行坚决的不调和的斗争……\n这个“个别人”指的自然是张春桥,不管林彪有没有认识到反“天才论”是毛的直接授意（我倾向于他意识到了）,但是上了车就下不来了,他必须要对此进行反击.他的嫡系陈伯达也跟着出场了：“……有人利用毛主席的谦虚,妄图贬低毛泽东思想.这是绝对办不到的.在毛泽东思想教育下,已经觉悟了的全国人民,很快就识破这种虚伪、阴谋诡计……”\n林彪的小弟也纷纷鼓噪,比如来自华北讨论组的六号简报：“……大家听了陈伯达同志、东兴同志在小组会上的发言,感到对林副主席讲话的理解大大加深了.特别是知道了我们党内,竟有人妄图否认伟大领袖毛主席是当代最伟大的天才,表示了最大、最强烈的愤慨,认为在经遇了四年文化大革命的今天,党内有这种反动思想的人,这种情况是很严重的,这种人就是野心家、阴谋家,是极端的反动分子,是地地道道的反革命修正主义分子,是没有刘少奇的刘少奇反动路线的代理人,是帝修反的走狗,是坏蛋,是反革命分子,应该揪出来示众,应该开除党籍,应该斗倒批臭,应该千刀万剐,全党共诛之,全国共讨之…”\n毛终于坐不住了,亲自出手了,于是就有了那份著名的批示《我的一点意见》：\n这个材料(指《恩格斯、列宁、毛主席关于称天才的几段语录》）是陈伯达同志搞的,欺骗了不少同志……\n……(陈伯达）采取突然袭击,煽风点火,唯恐天下不乱,大有炸平庐山,停止地球转动之势……\n……希望同志们同我们一道采取这种态度,团结起来,争取更大的胜利,\n不要上号称懂得马克思,而实际上根本不懂马克思那样一些人的当.\n毛当然知道是林彪在捣鬼,但就和林彪要拿张春桥开刀一样,他也只能先拿陈伯达开刀.随即毛和中央委员们一个个谈话,形势逆转.毛的爱将许世友和陈永贵来公开自我批评,毛告诉他们读马列,读红楼梦.毛心里很明白,林彪是野心家、陈伯达是走狗,而像许世友等人,就是政治头触欠缺的大老粗,但是忠诚度是值得信赖的.\n林彪在九届二中的政治赌博失败了,毛林双方也相互摸清了对方的底牌一一林：老大,你不是真心想让我接班啊；毛：林彪,我身上的东西,你一样没学会.之后,毛进而要求林的亲信黄吴李邱检讨、交代问题,又把李德生、谢富治塞进林的军委办事组里,分散林的权力.\n走到了这一步,野心家林彪也只剩下一条武力夺权、阴谋政变的不归路了.\n按理说毛辛辛苦苦一辈子,晚年丧子,如果真从权力继承的角度来说,把领导人的地位和国家权力交给一个完全忠于自己、自己又非常欣赏的爱将有何不可？林肯定心里不平、也委屈,您老人家的意志我都是120%的去贯彻啊,怎么就渐渐对我冷眼相待了呢？您这是图什么呢？\n图一个万世从无的新吋代.毛的理想,就连林都不能理解.毛是孤独的.就像《让子弹飞》里的张麻子,自己的兄弟们都去坐着火车吃着火锅唱着歌,不解地问他：“大哥,还回山里去干啥？”\n林彪死后,毛大病一场.一个78岁的老人,面对自己最疼爱的学生、部下、战友的背叛,这个打击可想而知.短暂的痛苦之后,毛又一次展现了领袖的英明、果断与铁腕,拖着老病之躯去安抚军队、镇压林彪余党、平息党内舆论.林彪的政变没能得逞,他也身败名裂遗臭万年,但就和老父亲杀忤逆儿一样,这样的胜利有何意义？\n毛泽东,已经一败涂地.\n四 基于官僚集团的尿性,除了发动底层人民的力量,毛泽东别无选择.然而诉诸于民粹的“净化”,真的就那么可靠吗？\n事实证明,腐化的先锋队可能带来慢性死亡,而不受控制的民粹运动,会直接造成休克.文革失败的根源,在《释放恶魔》一文中写到过,但可惜已经被删.附上：\n另外多一句嘴,斯坦福监狱实验被质疑造假,这其实国外一位博主发的博客,学术严谨性很待考量.只不过符合国内营销号的口味就被炒作起来了,还弄得耸人听闻.关于这件事可以看看菲利普•津巴多本人的回应,全文近两万多字大家自行围观,这里就不多与讨论了：\n五 有人总想把文化大革命归结于“政治斗争”、“打击异己”这是非常肤浅而简单地看法.历朝历代,哪个军政大权一把抓的皇帝需要发动全国群众打击政敌？李立三、王明、张国焘,当吋在党内都比他强势或势均力敌,也没有见他发动全国群众啊.蒋委员长搞定廖仲恺、胡汉民、许崇智,软禁刺头张学良、孙立人,哪用得着发动全国群众了？政治这种东西门门道道多了去了,要真动一个刘恐怕还真用不到.\n世界上下五千年,有那个统治者在执政的位置上喊出“造反有理”的口号来. 更何况,历朝历代皇帝杀功臣为的是他的儿子、孙子,为的是子孙江山万万年.毛呢？已经到了人生的尽头,长子十年前就死在了朝鲜战场,剩下一个有病的儿子和远房侄子又绝无接班可能,对于一个天天嚷嚷着“马上就要见马克思”的老人,他杀功臣为的是谁？为的是他哪个儿子？就像朱元瑋搞死胡惟庸,着眼于废除千年的丞相制,毛泽东心心念的也不是刘或其他,而是刘等人背后的庞然大物一一整个慢慢形成的既得利益集团！要砸烂人类几千年社会都无法砸烂的阶级固化金字塔！\n然而发动文化大革命又怎样呢？这又是一次彻底失败的社会实验.天下大乱.人类又一次求解贫富差距问题、阶级固化问题的实践,还是没有逃过失败的命运.勇士变成恶龙的问题,似乎还没有成功解决.\n毛的晚年是痛苦的,他反复的说着这类话：“‘蛲蛲者易折,皎皎者易污.阳春白雪,和者盖寡.盛名之下,其实难副.’这后两句,正是指我.事物总是要走向反面的,吹得越高,跌得越重,我是准备跌得粉碎的.那也没有什么要紧,物质不灭,不过粉碎罢了”；“我死了,可以开个庆祝会.你要打扮得漂漂亮亮的,最好穿颜色鲜艳的红衣服或花衣服,要兴高采烈、满面春风地参加庆祝会”……\n历史上但凡想动既得利益者蛋糕的,一般下场都很惨,而毛岂止是动了蛋糕,他老人家是想逆天改命啊.\n毫无疑问毛的判断是有错误的,他太过于相信他的人民了,我们看毛选和毛语录,满眼解释“依靠人民才能蠃得战争”“人民是智慧的,而我们是愚眛无知”这类的话,这也是为什么西方学者把毛泽东归为“民粹者”而非我国小清新们认为的“独裁者”.然而毛没有料到,在没有先锋队指引下的人民犹如洪水猛兽,一切人性之恶都被释放了出来,他后来意识到了这一点,然而当他 想再组建先锋队的时候,他的生命已经油尽灯枯,来不及了.\n虽然老了、倦了,甚至有些心灰意冷了,毛泽东依然用生命中最后一点精力,尝试着为人民构建一个新世界的蓝图,依然想给人民一套切实可行的方法论,想把这一“屠龙术”完善到切实可行、传之万世.“春蚕到死丝方尽,蜡炬成灰泪始干”,毛泽东还在_篇_篇的写文章,一场接着一场的开会议,告诉“造反”成功的人民,怎么怎么组织革命委员会接管政府机构和公检法职,怎么怎么组织生产委员会能让工人享有民主权利又不耽误生产……他就是想留下一点最后的东西,然而他的精力真的跟不上了,提供的那些方法论也并没有切实有效地推行、实践.\n比如核心内容是“干部参加劳动,工人参加管理；管理者和工人在生产实践和技术革命中相结合”的《鞍钢宪法》,是工人阶级自下而上的一次实践,强调基层工人和技术人员在生产管理中的重要作用,甚至被一些西方学者认为这是工人争取“经济民主”的重要尝试.文革中期,为了解决全国大乱对生产的破坏,《鞍钢宪法》又一次被隆重推到了舞台中央,然而曾经的“基层组织神器”却没能解决全国的乱象.这似乎在向毛证明着：想自下而上的、让底层构造上层的存在逻辑和规则,逆这一人类文明社会几千年雷打不动的“规矩”,目前来看,没有走通.\n他的痛苦,因为战友的背叛、因为实践的失败、因为对红色政权未来的忧心忡忡、因为出师未捷的悲凉……他说：“我一生干了两件事.一是与蒋介石斗了那么几十年,把他赶到那么几个海岛上去了.抗战八年,把日本人请回了老家.打进北京,总算进了紫禁城.对这些事持异议的.人不多,只有那么几个人,在我耳边叽叽喳喳,无非是让我及早收回那几个海岛罢了.另一件事你们知道,就是发动‘文化大革命’.这事拥护的人不多,反对的人不少.这两件事没有完,这笔遗产得交给下一代.和平交不成就动荡中交,搞得不好 后代怎么办,就得腥风血雨了.你们怎么办,只有天知道.”他对女儿李讷说,自己就是供外宾参观的“展览品”.1973年11月,澳大利亚总理威特兰来访时,很想知道毛泽东对中国未来的组织结构的看法.毛泽东谢绝了这个未来的话题,而直接引向自己的生命,意味深长地说：\n“周恩来和我都看不到中国革命结束了.”\n六 列宁说过：\n马克思的学说在今天的遭遇,正如历史上被压迫阶级在解放斗争中的革命思想家和领袖的学说常有的遭遇一样.当伟大的革命家在世时,压迫阶级总是不断迫害他们,以最恶毒的敌意、最疯狂的仇恨、最放肆的造谣和诽谤对待他们的学说.在他们逝世以后,便试图把他们变为无害的神像,可以说是把他们偶像化,赋予他们的名字某种荣誉,以便“安慰”和愚弄被压迫阶级,同时却阉割革命学说的内容,磨去它的革命锋芒,把它庸俗化.现在资产阶级和工人运动中的机会主义者在对马克思主义作这种“加工”的事情上正一致起来.他们忘记、抹杀和歪曲这个学说的革命方面,革命灵魂.他们把资产阶级可以接受或者觉得资产阶级可以接受的东西放在第一位来加以颂扬.\n对于革命者来说,真正的死亡莫过于对其去革命化的“修饰”.李师父的塑像高高耸立在罂粟田里,殊不知,李师父就是因为反对种鸦片而死的呢？\n文化大革命是毛泽东生命中最后的绝唱；也是全世界、全人类范围内无产阶级运动的挽歌.从此之后,我们只能看到,欧洲工人无休无止的罢工,只是为了提高福利,并没有任何改造整个社会规则的诉求；我们只能看到,底层人民把所有的发泄变成了打、砸、抢、烧汽车,本应该成为社会进步力量的他们,却站在了人类文明的对立面；我们只能看到,勤劳的东亚人民在血汗工厂中呻呤,便是跳楼时的那纵身一跃,也是悄无声息.\n先锋队之后,再无先锋队.\n革命家之后,再无革命家.\n勇士屠龙的故事还没完：\n尾随者返回村庄说出了这个秘密.他告诉人们：第一,我们要团结在一起去打败恶龙；第二,我们要警惕每一个英雄,不让他们受财宝吸引而堕落.尾随者受到村民们的拥戴,被称为“导师”,并率领村民再次打败恶龙. 导师去世后,参加最后一战的英雄们开始声称根本没有“英雄堕落”这回事,是导师欺骗了村民.英雄们结伙搬去了龙穴居住,并索取村民们的供养.他们把自己身上越来越多的片状物、越来越长的条状物都称作“英雄特色”,并且宣称这种变化是一切人类无可避免的宿命. 日子就这样过去,终有一天,一个绝望的村民无意间发现了导师的坟墓.村民们发掘了墓穴,突然明白英雄们所说的一切都是谎言.因为在那白石的墓穴里,水晶的灵柩间,躺着的并不是恶龙的遗骨,而是一个他们似曾相识的,凡人.这就是世上唯一一位没有堕落的英雄的故事.\n毛泽东,从未背叛人民.\n革命者骑在白马上,看跟到革命前一模一样的景象.还是一群人坐着火车吃着火锅唱着歌,只不过火车上的人变了.\n革命胜利了吗？革命才刚刚幵始.\n","permalink":"https://nagisa3113.github.io/posts/dragon/","title":"失传的屠龙术"},{"content":"来自《深入理解计算机系统》第五、六章，主要讨论如何理解编译器的能力和局限性。\n我们将会发现，对源代码进行非常微小的修改会对程序性能产生很大的影响。\n如何写出优秀的程序\n选取适当的算法和数据结构 编写编译器能够有效优化的源代码 相关知识\n计算机组成原理 汇编语言 编译原理 编译器只使用安全的优化 void twiddle1(long *xp， long *yp) { xp += *yp; xp += *yp; } void twiddle2(long *xp， long *yp) { xp += 2* *yp; } 似乎这两个函数具有相同的行为，但是twiddle1需要6次内存引用(2次读xp，2次读yp，2次写、xp)，而twiddle2只需要3次(读xp，读yp，写xp)显然函数twiddle2()的效率高一些.因此，我们希望编译器在编译twiddle1时，基于twiddle2会产生更有效的代码 然而，当xp和yp指向的是同一个对象时，两个函数的运算结果不同，编译器必须考虑到这点而不产生其优化版本，这造成了一个主要的妨碍优化的因素 可以使用内联函数替换以优化函数调用 内联函数(inline)类似于C中的宏(联想到汇编中的宏展开与函数跳转) 此时，函数调用将替换为函数体，编译器可以产生一个优化版本，但要慎重使用.\n一个简单的程序 我们引入度量标准**每元素的周期数(Cycles Per Element， CPE)**来表示程序性能.\n对于某一特定参考机器(原文使用的是i7 Haswell)，我们可以得到CPE的基本界限\n界限 整数 浮点数 + * + * 延迟 1.00 3.00 3.00 5.00 吞吐量 0.50 1.00 1.00 0.50 延迟界限为一个运算功能单元进行一次运算的时钟周期，多个运算单元可以同时工作，但都需要从内存读取数据，所以造成了吞吐量界限.\n延迟界限给出了任何必须按照严格顺序完成合并运算的函数所需要的最小CPE值\n吞吐量界限给出了CPE的最小界限\n接下的例子将展示如何突破延迟界限以接近吞吐量界限，我们会惊讶的发现，最终的程序比原始的快了20倍\n给定一个数据类型为data_t的抽象链表vec_rec(C++中的vector，Java中的ArrayList)，其头指针为*vec_ptr，我们要做的是对其所有数据进行求和以及求积 //对于求和 #define IDENT 0 #define OP + //对于求积 #define IDENT 1 #define OP * void combine1(vec_ptr v， data_t* dest) { *dest = IDENT; for (int i=0;i \u0026lt; vec_length(v);i++) { *dest = *dest OP get_element(i) } } 函数 方法 整数 浮点数 + * + * combine1 未优化的 22 20 20 20 combine1 -O1优化的 10 10 10 11 以命令行选项“-Og”调用GCC，会让GCC使用一组基本的优化.以选项“-O1”或更高，可以使用更大量的优化\nps:这里偷懒省去了小数点后两位\n消除不必要的循环 让我们看下combine1有什么可以改进的呢(要知道这个可是最慢的!) 发现每次循环时都需要调用vec_length检查边界，我们用一个局部变量length进行存储，将函数调用移出循环，时间复杂度从O(n^2)变为O(n).\nvoid combine2(vec_ptr v， data_t* dest) { long length = vec_length(v); *dest = IDENT; for (int i=0;i \u0026lt; length;i++) { *dest = *dest OP get_element(i); } } 函数 方法 整数 浮点数 + * + * combine1 -O1优化的 10 10 10 11 combine2 移动vec_length() 7 9 9 11 这是一类常见的优化例子，称为代码移动，编译器会尝试进行，但不幸的是编译器对此非常小心，如果vec_length()有某种副作用，会产生不同的行为，程序员必须帮助编译器进行显式的优化.\n减少过程调用 之前我们从循环里移除了vec_length()，但是我们发现循环中依然存在函数调用:get_element(i)获取下一个元素，这个函数要把索引与数据边界进行比较，但在for的条件判断中已经限制了数组的边界范围，我们考虑将它移出循环，通过下标直接访问数组.\n这并不一定是一个好方法，因为破坏了数据抽象\nvoid combine3(vec_ptr v， data_t *dest) { long length = vec_length(v); *dest = IDENT; data_t* data = get_vec_start(v); for(int i=0;i \u0026lt; length;i++) { *dest = *dest OP data[i]; } } 函数 方法 整数 浮点数 + * + * combine2 移动vec_length() 7 9 9 11 combine3 直接数据访问 7 9 9 11 然而性能没有明显的提升，显然是循环中的其他操作形成了瓶颈，后面会提到，这个修改我们先保留.\n消除不必要的内存引用 一直以来我们将累计值存储在指针dest指定的位置，我们检查combine3编译出的汇编代码\n原文的汇编代码与所学的80x86不同，在此是我简化后的\nL17: mov (%bx)-\u0026gt;%xm\t将寄存器bx存储的dest值给临时变量寄存器xm mul (%dx) * %xm -\u0026gt; %xm\t将xm与寄存器dx中 的data[i]相乘，结果赋给xm mov %xm -\u0026gt; (%bx)\t将xm的值重新赋值给寄存器bx存储的dest 因为寄存器不能直接参与运算 以上代码作用为 *dest=*dest OP data[i]\tadd 8 -\u0026gt; %dx\t指针移动，8为double的字长 cmp %dx + length， %dx 循环结束判断 jmp L17 每次迭代时，累积变量的数值(*dest)都要从内存中读入再写入，这样很浪费，因为每次迭代开始时读的值就是上次迭代写入的值 为了消除这种不必要的内存读写，我们引入一个临时变量acc\nvoid combine4(vec_ptr v， data_t *dest) { long length = vec_length(v); data_t acc = IDENT; data_t* data = get_vec_start(v); for (int i=0;i \u0026lt; length;i++) { acc = acc OP data[i]; } *dest = acc; } 对应的汇编c\nL25: mul (%dx) * %xm -\u0026gt; %xm add 8 -\u0026gt; %dx cmp %dx + length， %dx jmp L25 与之前的循环相比，每次迭代的内存操作从两次读和一次写减少到一次写\n函数 方法 整数 浮点数 + * + * combine3 直接数据访问 7 9 9 11 combine4 临时变量 1.2 3 3 5 结果令人惊讶，已经接近延迟界限了，我们再次希望编译器能够自动将其优化成临时变量的版本，但遗憾的是，当dest指向的是data[i]时，两个函数会产生不同的结果.\n理解处理器的工作流程 combie4抽象后的数据流图:\n简化后:\n左边的链为浮点乘法，延迟为5个周期，右边的链为整数加法，延迟为1个周期 程序关键路径是由对acc的连续读写(左边的链)造成的，这是限制程序性能的主要因素\n循环展开 通过增加每次迭代计算元素的数量，减少循环次数\n我们称之为2x1展开\nvoid combine5(vec_ptr v， data_t *dest) { long length = vec_length(v); long acc = IDENT; data_t* data = get_vec_start(v); for (int i=0;i \u0026lt; length;i+=2){//为了表示方便，假设长度为偶数 acc = (acc OP data[i]) OP data[i+1]; } *dest = acc; } 函数 方法 整数 浮点数 + * + * combine4 无展开 1.27 3.01 3.01 5.01 combine5 2x1展开 1..01 3.01 3.01 5.01 3x1展开 1..01 3.01 3.01 5.01 几乎达到了延迟界限，让我们再看看数据流图\n迭代次数减半了，并减少了一个整数加操作，但每个迭代中还是有两个顺序的乘法操作. 这个关键路径仍是性能制约因素.\n提高并行性 指令级并行:在实际的处理器中，同时对多条指令求值\n但在顺序操作中，处理器需要等待上一个运算的结果才能进行下一个运算\n我们加入一点分治的思想：使用多个累计变量 称之为2 x 2展开\nvoid combine6(vec_ptr v， data_t *dest) { long length = vec_length(v); long acc0 = IDENT; long acc1 = IDENT; data_t* data = get_vec_start(v); for (int i=0;i \u0026lt; length;i++){//为了表示方便，假设长度为偶数 acc0 = acc0 OP data[i]; } for (int i=1;i \u0026lt; length;i++) { acc1 = acc1 OP data[i]; } *dest = acc0 OP acc1; } 值得考虑的是运算是否具有可交换性和可结合性， 此外，浮点运算可能产生的溢出和舍去也会造成影响\n现在有两个互相独立关键路径，每条路径只包含n/2个操作，我们成功的将CPE降为1/2，但整数加法还有太多但循环开销，无法达到理论吞吐量界限0.50.\n函数 方法 整数 浮点数 + * + * combine5 2x1展开 1..01 3.01 3.01 5.01 combine6 2x2展开 0.81 1.51 1.51 2.51 使用k x k 循环展开\n所有CPE都有所改进，.接近其吞吐量界限.\n现在，我们通过另一种方式提高并行性：重新结合变换 称之为2 x 1a展开\nacc = (acc OP data[i]) OP data[i+1]; //修改为 acc = acc OP (data[i] OP data[i+1]); 函数 方法 整数 浮点数 + * + * combine5 2x1展开 1..01 3.01 3.01 5.01 combine7 2x1a展开 1.01 1.51 1.51 2.51 关键路径上只有n/2个操作，每次迭代内的第一个乘法都不需要等待前一次迭代的累计值就可以执行.因此，最小的CPE减少的2倍\n使用k x 1a 展开\n所有的CPE都几乎达到了吞吐量界限\n大多数编译器不会尝试对浮点运算做重新结合，因为不能保证运算是可结合的 GCC会对整数运算执行重新结合，但不是总有好的效果\n我们发现循环展开和并行地积累在多个值中，是提高程序性能的更可靠的办法.\n小结 函数 方法 整数 浮点数 + * + * combine1 -O1优化的 10.12 10.12 10.17 11.14 combine6 10 x 10 循环展开 0.55 1.00 1.01 0.52 延迟界限 1.00 3.00 3.00 5.00 吞吐量界限 0.50 1.00 1.00 0.50 不可思议! 想想我们使用了哪些优化技术(不妨看一看目录)，使得CPE接近吞吐量界限，只受限于功能单元的容量. 我们只使用普通的C代码和标准编译器就获得了所有的这些改进.这说明现代处理器有相当的计算能力，但是我们可能需要按非常程式化的方式来编写程序以便将这些能力诱发出来.\n其他 寄存器溢出 分支预测与预测错误惩罚 SIMD与AVX 理解存储器层次结构 高速缓存(cache) 缓存命中与不命中惩罚 局部性 时间局部性 空间局部性 编写高速缓存友好的代码 ECS ","permalink":"https://nagisa3113.github.io/posts/compiler/","title":"理解编译器优化"}]