<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nostalgia</title>
    <link>https://nagisa3113.github.io/</link>
    <description>Recent content on Nostalgia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Wed, 10 Jan 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://nagisa3113.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>作品一覧</title>
      <link>https://nagisa3113.github.io/posts/work/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/work/</guid>
      <description>Together&amp;ndash;2人協力プラットフォームジャンプゲーム 制作時間　4ヶ月間
チームメンバー：プログラマー1人、プランナー1人、デザイナー1人
ゲームの背景が比較的暗いため、プレイヤーはキャラクターの周囲しか見ることができません。プレイヤーはライトを活用し、視野を広げ、協力してゲームクリアを目指します。
注目点
2Dライティングとエフェクトシェーダーを使用し、きれいなグラフィックを実現しました。 様々なライトに関するパズルを設定しました。 ローカルネットワーク同期（TCPによる）機能を追加しました。 ソースコード
動画サイト（英語字幕対応）
Souls&amp;ndash;アクションゲーム 制作時間　2ヶ月間
Dark Soulsに参考して、Unityのアセットストアで提供されているアセットを利用して、一人で制作しました。
キャラクターの移動、ジャンプ、ローリング、攻撃、盾のパリィ、ロックオンなどの機能を実装しました。
ソースコード
Root&amp;ndash;シミュレーションゲーム Global Game Jam 2023 Tokyo, Roppongi
チームメンバー：プログラマー1人、プランナー1人、デザイナー1人、ミュージシャン1人
異なる国からの参加者とチームを組んで、現場で48時間以内に企画から開発までを体験し、制作したゲームです。
ゲーム内容は、同時にいくつかの根を左右に移動させ、障害物を避けながら、目的地に行くことです。
注目点
「Sprite Shape」という機能を用いて、根の成長アニメーションをスムーズに実現しました。 操作方法は簡単でありながらも、三つ難易度を備えています。 短時間での進捗管理とコミュニケーション能力を身につけました ソースコード
動画サイト（中国語字幕対応）
Emotion&amp;ndash;カードゲーム 制作時間　3ヶ月間
チームメンバー：プログラマー1人、プランナー1人、デザイナー1人
ローグライクゲームで、プレイヤーは状況によって、カードを選びます。ステージをクリア後に報酬を獲得できます。
注目点
良いデザインパターンを使用しています。 拡張可能なデータ構造を使用しています。 ソースコード
NieR&amp;ndash;弾幕系シューティングゲーム 制作期間：3週間
NieR:Automataを模倣して、一人で制作しました。
注目点　エフェクトシェーダーとポストプロセッシングエフェクトを実現しています。 優れた打撃感を再現するために、パーティクル効果を実装しました。 ソースコード
Celeste&amp;ndash;プラットフォームジャンプゲーム 一週間の独学で開発したDemo
Celesteというゲームを模倣し、スムーズな手触りを目指しました。
注目点
State Machineを用いて、キャラクターの動作コードを簡潔に書きました。 パラメータを細かく調整して、優れた操作感ができます。 スムーズなカメラエフェクトを実現しています。 ソースコード
Repair&amp;ndash;ビジュアルノベルゲーム Global Game Jam 2019, Shanghai
チームメンバー：プログラマー1人、デザイナー1人
初めてGlobal Game Jamでの制作になります。このイベントを通じて、開発過程を楽しむことができました。</description>
    </item>
    
    <item>
      <title>作品</title>
      <link>https://nagisa3113.github.io/posts/zuopin/</link>
      <pubDate>Fri, 05 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/zuopin/</guid>
      <description>Together 双人合作平台跳跃游戏
制作时间 4个月
制作成员：1程序 1策划 1美术
使用了2D光照。游戏的背景比较暗，玩家只能看到角色附近的环境。玩家需要利用场景中的光源，扩大视野，合作通关。
亮点
使用2D光照和Shader效果，实现华丽的画面效果。 利用光源设计了很多谜题。 实现了本地多人同步功能（LAN by TCP）。 Code
動画サイト（英語字幕対応）
Souls 动作游戏
制作时间 2个月
参考Dark Souls，实现了角色移动，跳跃，翻滚，攻击，盾反，视角锁定等功能。
Code
Root 植物模拟游戏
Global Game Jam 2023 Tokyo, Roppongi
制作人员：1程序 1策划 1美术 1音乐
与来自不同国家的参加者组队，48小时内构思到实现现场开发出的一款游戏。
游戏内容是同时控制好几支树根，在避开障碍物的条件下到达目的地。
亮点
使用Sprite Shape功能，实现流畅的树根生长动画。 操作方式很简单，但也具备挑战性。 掌握了短时间内进度管理和沟通的能力。 Code
動画サイト（中国字幕対応）
Emotion 卡牌游戏
制作时间 3个月
制作人员 1程序 1策划 1美术
是一款rogue like游戏，玩家在过关后可以获得报酬。
亮点
使用了优秀的设计模式。 使用了可扩展的数据结构。 Code
NieR 弹幕射击游戏
被NieR:Automata中的小游戏吸引，一个人花了三周时间完成
亮点
使用Shader实现各种画面效果，如Bloom 随机背景。 利用各种效果实现优秀的打击感。 还原原作，非常好玩。 Code
Celeste 自学Unity一周内完成的游戏Demo
模仿Celeste，复现优秀的操作手感</description>
    </item>
    
    <item>
      <title>测试驱动开发</title>
      <link>https://nagisa3113.github.io/posts/tdd/</link>
      <pubDate>Tue, 12 May 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/tdd/</guid>
      <description>&lt;p&gt;在软件工程中，绕不开的一个过程就是测试。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>网络游戏同步</title>
      <link>https://nagisa3113.github.io/posts/network/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/network/</guid>
      <description>&lt;p&gt;浅谈网络游戏开发中的TCP/UDP、帧同步/状态同步以及预测、快照和回滚&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GOAP 目标导向型算法</title>
      <link>https://nagisa3113.github.io/posts/goap/</link>
      <pubDate>Sun, 05 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/goap/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://alumni.media.mit.edu/~jorkin/goap.html&#34;&gt;GOAP，Goal-Oriented Action Planning&lt;/a&gt;是一个很好的AI动态规划解决方案，与之相对的是传统的硬编码，如状态机和行为树，Unity中提供了&lt;a href=&#34;https://docs.unity3d.com/Packages/com.unity.ai.planner@0.0/manual/index.html&#34;&gt;AIPlanner&lt;/a&gt;插件&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>为什么要学计算机</title>
      <link>https://nagisa3113.github.io/posts/computer/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/computer/</guid>
      <description>&lt;p&gt;Unix 是简单的，你不需要成为一个天才或是计算机专家。但是在这个冲斥着 Windows 错误观念的世界，你需要信念和勇气才能理解它的简单 ————&lt;a href=&#34;https://www.douban.com/group/topic/12121637/&#34;&gt;王垠：《完全用Linux工作》&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>树莓派</title>
      <link>https://nagisa3113.github.io/posts/raspberrypi/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/raspberrypi/</guid>
      <description>&lt;p&gt;树莓派（raspberriPi）是一个微型的，信用卡大小的可以运行Linux的单板机。它使用的是基于精简指令集（RISC）的ARM架构的处理器，相比于Intel采用的x86的复杂指令集（CISC），它的结构简单，功耗低，价格低，非常适合(穷)学生。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>给ThinkPad-X220安装ArchLinux</title>
      <link>https://nagisa3113.github.io/posts/arch/</link>
      <pubDate>Mon, 10 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/arch/</guid>
      <description>&lt;p&gt;最近在某海鲜市场淘了台ThinkPad X220，记录一下ArchLinux的配置过程&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>函数式编程</title>
      <link>https://nagisa3113.github.io/posts/functional-programming/</link>
      <pubDate>Sat, 14 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/functional-programming/</guid>
      <description>&lt;p&gt;先提出一个问题: &lt;strong&gt;为什么C语言可以嵌套定义类,但是不能嵌套定义函数?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;反过来我们可以想想: &lt;strong&gt;如果可以在函数中定义函数会发生什么?&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>寻路</title>
      <link>https://nagisa3113.github.io/posts/pathfinding/</link>
      <pubDate>Sun, 08 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/pathfinding/</guid>
      <description>&lt;p&gt;从启发式搜索算法到A*算法的优化&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>自治的可移动游戏智能体</title>
      <link>https://nagisa3113.github.io/posts/flocking/</link>
      <pubDate>Thu, 19 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/flocking/</guid>
      <description>&lt;p&gt;在近日的索尼 PlayStation “State of Play”上公布了许多新游戏，其中&lt;a href=&#34;https://youtu.be/ouHaVvmZ5uw&#34;&gt;《Humanity》&lt;/a&gt;展现了模拟人类集体行为，效果非常震撼。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>控制反转与依赖注入</title>
      <link>https://nagisa3113.github.io/posts/ioc/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/ioc/</guid>
      <description>&lt;p&gt;控制反转(Inversion of Control，IoC），是面向对象编程中的一种设计原则，可以用来减低计算机代码之间的耦合度。常用于Web开发,如Spring MVC。&lt;/p&gt;
&lt;p&gt;它把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的“控制反转”概念就是对组件对象控制权的转移，从程序代码本身转移到了外部容器。&lt;/p&gt;
&lt;p&gt;通过控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体(容器)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>射箭艺术中的禅</title>
      <link>https://nagisa3113.github.io/posts/zen/</link>
      <pubDate>Thu, 25 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/zen/</guid>
      <description>&lt;p&gt;禅是纯粹的体验，不存在于任何言语文字之中。一位追求生命意义的德国哲学教授，远渡重洋来学习禅的真义。处处碰壁之后，透过了箭术，他体验到最活生生的禅。在禅的描述上，他的追寻记录达到了文字的极至。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>传播学原理</title>
      <link>https://nagisa3113.github.io/posts/communication/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/communication/</guid>
      <description>&lt;p&gt;记录一下原专业学习的内容&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>失传的屠龙术</title>
      <link>https://nagisa3113.github.io/posts/dragon/</link>
      <pubDate>Sat, 05 May 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/dragon/</guid>
      <description>&lt;p&gt;文: 赵皓阳&lt;/p&gt;
&lt;h2 id=&#34;引子&#34;&gt;引子&lt;/h2&gt;
&lt;p&gt;有这样一个故事：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;有一条恶龙,附近的村民深受其害,每年这个村庄都会有一个少年英雄去与恶龙搏斗,但无人生还.又一个英雄出发时,有人悄悄尾随.龙穴铺满金银财宝,看到英雄用剑刺死恶龙,然后坐在尸身上,看着闪烁的珠宝,慢慢地长出鱗片、尾巴和触角,最终变成恶龙.&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>理解编译器优化</title>
      <link>https://nagisa3113.github.io/posts/compiler/</link>
      <pubDate>Sat, 10 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nagisa3113.github.io/posts/compiler/</guid>
      <description>&lt;p&gt;来自《深入理解计算机系统》第五、六章，主要讨论如何理解编译器的能力和局限性。&lt;/p&gt;
&lt;p&gt;我们将会发现，对源代码进行非常微小的修改会对程序性能产生很大的影响。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>